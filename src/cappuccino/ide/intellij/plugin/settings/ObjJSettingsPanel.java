package cappuccino.ide.intellij.plugin.settings;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.util.ResourceBundle;

import static cappuccino.ide.intellij.plugin.settings.ObjJPluginSettingsHolder.INSTANCE;

public class ObjJSettingsPanel extends JPanel {
    private JTabbedPane tabbedPane1;
    private JCheckBox enableExperimentalSelectorRename;
    private JCheckBox ignoreOvershadowedVariables;
    private JTextArea ignoredSelectors;
    private JTextArea ignoredVariables;
    private JPanel main;

    JPanel getMain() {
        return main;
    }

    boolean isSelectorRenameEnabled() {
        return enableExperimentalSelectorRename.isSelected();
    }

    boolean isSuppressOvershadowedVariableWarningsEnabled() {
        return ignoreOvershadowedVariables.isSelected();
    }

    String ignoredSelectors() {
        return ignoredSelectors.getText();
    }

    String ignoredVariables() {
        return ignoredVariables.getText();
    }

    void refresh() {
        enableExperimentalSelectorRename.setSelected(INSTANCE.selectorRenameEnabled());
        ignoreOvershadowedVariables.setSelected(INSTANCE.ignoreOvershadowedVariables());
        ignoredSelectors.setText(INSTANCE.ignoredSelectorString());
        ignoredVariables.setText(INSTANCE.ignoredVariableNameString());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        main = new JPanel();
        main.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        main.setOpaque(false);
        tabbedPane1 = new JTabbedPane();
        main.add(tabbedPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        tabbedPane1.setBorder(BorderFactory.createTitledBorder(null, "Objective-J Settings", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$(null, -1, 20, tabbedPane1.getFont())));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setOpaque(false);
        tabbedPane1.addTab(ResourceBundle.getBundle("ObjJPluginText").getString("objj.plugin.settings.general.fieldname"), panel1);
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setOpaque(false);
        panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        panel2.setOpaque(false);
        scrollPane1.setViewportView(panel2);
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(2, 1, new Insets(5, 5, 5, 5), -1, 10));
        panel3.setFocusable(true);
        panel3.setOpaque(false);
        panel2.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel3.setBorder(BorderFactory.createTitledBorder(null, ResourceBundle.getBundle("ObjJPluginText").getString("objj.plugin.settings.general.warnings.variables.fieldlabel"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$(null, -1, 16, panel3.getFont())));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel4.setOpaque(false);
        panel3.add(panel4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel4.setBorder(BorderFactory.createTitledBorder("General"));
        ignoreOvershadowedVariables = new JCheckBox();
        this.$$$loadButtonText$$$(ignoreOvershadowedVariables, ResourceBundle.getBundle("ObjJPluginText").getString("objj.plugin.settings.general.warnings.ignore-overshadowed-variables.checkbox.text"));
        panel4.add(ignoreOvershadowedVariables, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 5, 10), -1, -1));
        panel5.setOpaque(false);
        panel3.add(panel5, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel5.setBorder(BorderFactory.createTitledBorder(ResourceBundle.getBundle("ObjJPluginText").getString("objj.plugin.settings.general.warnings.selectors.ignore.fieldname")));
        final JTextArea textArea1 = new JTextArea();
        textArea1.setEditable(false);
        Font textArea1Font = UIManager.getFont("Label.font");
        if (textArea1Font != null) {
            textArea1.setFont(textArea1Font);
        }
        textArea1.setLineWrap(true);
        textArea1.setOpaque(false);
        textArea1.setText(ResourceBundle.getBundle("ObjJPluginText").getString("objj.plugin.settings.general.warnings.variables.ignore.description"));
        textArea1.setWrapStyleWord(true);
        panel5.add(textArea1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(150, 50), null, 0, false));
        ignoredVariables = new JTextArea();
        ignoredVariables.setEditable(true);
        ignoredVariables.setLineWrap(true);
        ignoredVariables.setOpaque(true);
        ignoredVariables.setWrapStyleWord(true);
        panel5.add(ignoredVariables, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(1, 1, new Insets(5, 5, 5, 5), -1, 10));
        panel6.setOpaque(false);
        panel2.add(panel6, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel6.setBorder(BorderFactory.createTitledBorder(null, ResourceBundle.getBundle("ObjJPluginText").getString("objj.plugin.settings.general.warnings.selectors.fieldlabel"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$(null, -1, 16, panel6.getFont()), new Color(-16777216)));
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        panel7.setOpaque(false);
        panel6.add(panel7, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel7.setBorder(BorderFactory.createTitledBorder(null, ResourceBundle.getBundle("ObjJPluginText").getString("objj.plugin.settings.general.warnings.selectors.ignore.fieldname"), TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, this.$$$getFont$$$(null, -1, -1, panel7.getFont())));
        final JTextArea textArea2 = new JTextArea();
        textArea2.setEditable(false);
        Font textArea2Font = UIManager.getFont("Label.font");
        if (textArea2Font != null) {
            textArea2.setFont(textArea2Font);
        }
        textArea2.setLineWrap(true);
        textArea2.setOpaque(false);
        textArea2.setText(ResourceBundle.getBundle("ObjJPluginText").getString("objj.plugin.settings.general.warnings.selectors.ignore.description"));
        textArea2.setWrapStyleWord(true);
        panel7.add(textArea2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(150, 50), null, 0, false));
        ignoredSelectors = new JTextArea();
        ignoredSelectors.setEditable(true);
        ignoredSelectors.setEnabled(true);
        ignoredSelectors.setLineWrap(true);
        ignoredSelectors.setVerifyInputWhenFocusTarget(false);
        ignoredSelectors.setWrapStyleWord(true);
        panel7.add(ignoredSelectors, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JPanel panel8 = new JPanel();
        panel8.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, 10));
        panel8.setOpaque(false);
        tabbedPane1.addTab(ResourceBundle.getBundle("ObjJPluginText").getString("objj.plugin.settings.experimental.fieldname"), panel8);
        final JPanel panel9 = new JPanel();
        panel9.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 5, 10), -1, -1));
        panel9.setOpaque(false);
        panel8.add(panel9, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        panel9.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), ResourceBundle.getBundle("ObjJPluginText").getString("objj.plugin.settings.experimental.selectors.rename.fieldname")));
        final JTextArea textArea3 = new JTextArea();
        textArea3.setAutoscrolls(false);
        Font textArea3Font = UIManager.getFont("Label.font");
        if (textArea3Font != null) {
            textArea3.setFont(textArea3Font);
        }
        textArea3.setLineWrap(true);
        textArea3.setOpaque(false);
        textArea3.setText(ResourceBundle.getBundle("ObjJPluginText").getString("objj.plugin.settings.experimental.selectors.rename.warning"));
        textArea3.setWrapStyleWord(true);
        panel9.add(textArea3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(150, 50), null, 0, false));
        enableExperimentalSelectorRename = new JCheckBox();
        this.$$$loadButtonText$$$(enableExperimentalSelectorRename, ResourceBundle.getBundle("ObjJPluginText").getString("objj.plugin.settings.experimental.selectors.rename.checkbox.text"));
        panel9.add(enableExperimentalSelectorRename, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) {
            return null;
        }
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) {
                    break;
                }
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return main;
    }
}
