package cappuccino.ide.intellij.plugin.contributor


internal val JsClassHTMLElement = c(
        className = "DOMElement",
        isStruct = true,
        extends = listOf("Element", "JsClassGlobalEventHandlers", "DocumentAndElementEventHandlers", "ElementContentEditable", "HTMLOrSVGElement", "ElementCSSInlineStyle"),
        properties = listOf(
                p(name = "accessKey", type = "string"),
                p(name = "accessKeyLabel", type = "string", readonly = true),
                p(name = "autocapitalize", type = "string"),
                p(name = "dir", type = "string"),
                p(name = "draggable", type = "boolean"),
                p(name = "hidden", type = "boolean"),
                p(name = "innerText", type = "string"),
                p(name = "lang", type = "string"),
                p(name = "offsetHeight", type = "number", readonly = true),
                p(name = "offsetLeft", type = "number", readonly = true),
                p(name = "offsetParent", type = "Element", nullable = true, readonly = true),
                p(name = "offsetTop", type = "number", readonly = true),
                p(name = "offsetWidth", type = "number", readonly = true),
                p(name = "spellcheck", type = "boolean"),
                p(name = "title", type = "string"),
                p(name = "translate", type = "boolean")
        ),
        functions = listOf(
                f(name = "click", returns = VOID),
                f(name = "removeEventListener",
                        parameters = listOf(
                                p(name = "type", type = "string"),
                                p(name = "listener", type = "EventListenerOrEventListenerObject"),
                                p(name = "options", type = "boolean | EventListenerOptions", nullable = true)
                        ),
                        returns = VOID)
        )
)

internal val JsClassGlobalEventHandlers = c(
        className = "GlobalEventHandlers",
        isStruct = true,
        properties = listOf(
                p("onabort", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "UIEvent", comment = "The event")), returns = rt("?")), nullable = true, comment = "Fires when the user aborts the download."),
                p("onanimationcancel", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "AnimationEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("onanimationend", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "AnimationEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("onanimationiteration", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "AnimationEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("onanimationstart", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "AnimationEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("onauxclick", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true),
                p("onblur", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "FocusEvent", comment = "The event")), returns = rt("?")), nullable = true, comment = "Fires when the object loses the input focus."),
                p("oncancel", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true),
                p("oncanplay", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Occurs when playback is possible, but would require further buffering."),
                p("oncanplaythrough", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true),
                p("onchange", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Fires when the contents of the object or selection have changed."),
                p("onclick", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "MouseEvent", comment = "The Mouse Event")), returns = rt("?")), nullable = true, comment = "Fires when the user clicks the left mouse button on the object"),
                p("onclose", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true),
                p("oncontextmenu", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "MouseEvent", comment = "The Mouse Event")), returns = rt("?")), nullable = true, comment = "Fires when the user clicks the right mouse button in the client area\", opening the context menu."),
                p("oncuechange", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event")), returns = rt("?")), nullable = true),
                p("ondblclick", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "MouseEvent", comment = "The mouse event")), returns = rt("?")), nullable = true, comment = "Fires when the user double-clicks the object."),
                p("ondrag", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "DragEvent", comment = "The event")), returns = rt("?")), nullable = true, comment = "Fires on the source object continuously during a drag operation."),
                p("ondragend", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "DragEvent", comment = "The event")), returns = rt("?")), nullable = true, comment = "Fires on the source object when the user releases the mouse at the close of a drag operation."),
                p("ondragenter", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "DragEvent", comment = "The drag event")), returns = rt("?")), nullable = true, comment = "Fires on the target element when the user drags the object to a valid drop target."),
                p("ondragexit", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true),
                p("ondragleave", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "DragEvent", comment = "The drag event")), returns = rt("?")), nullable = true, comment = "Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation."),
                p("ondragover", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "DragEvent", comment = "The event")), returns = rt("?")), nullable = true, comment = "Fires on the target element continuously while the user drags the object over a valid drop target."),
                p("ondragstart", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "DragEvent", comment = "The event")), returns = rt("?")), nullable = true, comment = "Fires on the source object when the user starts to drag a text selection or selected object."),
                p("ondrop", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "DragEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("ondurationchange", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Occurs when the duration attribute is updated."),
                p("onemptied", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Occurs when the media element is reset to its initial state."),
                p("onended", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Occurs when the end of playback is reached."),
                p("onerror", type = "OnErrorEventHandler", comment = "Fires when an error occurs during object loading."),
                p("onfocus", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "FocusEvent", comment = "The event")), returns = rt("?")), nullable = true, comment = "Fires when the object receives focus."),
                p("ongotpointercapture", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "PointerEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("oninput", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true),
                p("oninvalid", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true),
                p("onkeydown", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "KeyboardEvent", comment = "The keyboard event")), returns = rt("?")), nullable = true, comment = "Fires when the user presses a key."),
                p("onkeypress", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "KeyboardEvent")), returns = rt("?")), nullable = true, comment = "Fires when the user presses an alphanumeric key."),
                p("onkeyup", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "KeyboardEvent")), returns = rt("?")), nullable = true, comment = "Fires when the user releases a key."),
                p("onload", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event")), returns = rt("?")), nullable = true, comment = "Fires immediately after the browser loads the object."),
                p("onloadeddata", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event")), returns = rt("?")), nullable = true, comment = "Occurs when media data is loaded at the current playback position."),
                p("onloadedmetadata", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event")), returns = rt("?")), nullable = true, comment = "Occurs when the duration and dimensions of the media have been determined."),
                p("onloadend", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "ProgressEvent")), returns = rt("?")), nullable = true),
                p("onloadstart", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event")), returns = rt("?")), nullable = true, comment = "Occurs when Internet Explorer begins looking for media data."),
                p("onlostpointercapture", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "PointerEvent")), returns = rt("?")), nullable = true),
                p("onmousedown", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "MouseEvent")), returns = rt("?")), nullable = true, comment = "Fires when the user clicks the object with either mouse button."),
                p("onmouseenter", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "MouseEvent")), returns = rt("?")), nullable = true),
                p("onmouseleave", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "MouseEvent")), returns = rt("?")), nullable = true),
                p("onmousemove", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "MouseEvent", comment = "The mouse event")), returns = rt("?")), nullable = true, comment = "Fires when the user moves the mouse over the object."),
                p("onmouseout", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "MouseEvent", comment = "The Mouse Event")), returns = rt("?")), nullable = true, comment = "Fires when the user moves the mouse pointer outside the boundaries of the object."),
                p("onmouseover", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "MouseEvent", comment = "The mouse event.")), returns = rt("?")), nullable = true, comment = "Fires when the user moves the mouse pointer into the object."),
                p("onmouseup", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "MouseEvent", comment = "The Mouse Event")), returns = rt("?")), nullable = true, comment = "Fires when the user releases a mouse button while the mouse is over the object."),
                p("onpause", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Occurs when playback is paused."),
                p("onplay", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Occurs when the play method is requested."),
                p("onplaying", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Occurs when the audio or video has started playing."),
                p("onpointercancel", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "PointerEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("onpointerdown", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "PointerEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("onpointerenter", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "PointerEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("onpointerleave", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "PointerEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("onpointermove", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "PointerEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("onpointerout", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "PointerEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("onpointerover", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "PointerEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("onpointerup", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "PointerEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("onprogress", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "ProgressEvent", comment = "The event")), returns = rt("?")), nullable = true, comment = "Occurs to indicate progress while downloading media data."),
                p("onratechange", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Occurs when the playback rate is increased or decreased."),
                p("onreset", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Fires when the user resets a form."),
                p("onresize", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "UIEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("onscroll", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Fires when the user repositions the scroll box in the scroll bar on the object."),
                p("onsecuritypolicyviolation", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "SecurityPolicyViolationEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("onseeked", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Occurs when the seek operation ends."),
                p("onseeking", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Occurs when the current playback position is moved."),
                p("onselect", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Fires when the current selection changes."),
                p("onselectionchange", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true),
                p("onselectstart", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true),
                p("onstalled", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Occurs when the download has stopped."),
                p("onsubmit", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true),
                p("onsuspend", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Occurs if the load operation has been intentionally halted."),
                p("ontimeupdate", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Occurs to indicate the current playback position."),
                p("ontoggle", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event, comment = \"The event\"")), returns = rt("?")), nullable = true),
                p("ontouchcancel", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "TouchEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("ontouchend", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "TouchEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("ontouchmove", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "TouchEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("ontouchstart", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "TouchEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("ontransitioncancel", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "TransitionEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("ontransitionend", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "TransitionEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("ontransitionrun", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "TransitionEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("ontransitionstart", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "TransitionEvent", comment = "The event")), returns = rt("?")), nullable = true),
                p("onvolumechange", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Occurs when the volume is changed, or playback is muted or unmuted."),
                p("onwaiting", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "Event", comment = "The event")), returns = rt("?")), nullable = true, comment = "Occurs when playback stops because the next frame of a video resource is not available."),
                p("onwheel", callback = callback(parameters = listOf(p("this", "JsClassGlobalEventHandlers"), p("ev", "WheelEvent", comment = "The event")), returns = rt("?")), nullable = true)
        ),
        functions = listOf(
                f("addEventListener", parameters = listOf(
                        p(name = "type", type = "string"),
                        p("listener",
                                callback = callback(parameters = listOf(p("ev", "Event")), returns = rt("?")), nullable = false),
                        p(name = "options", type = "boolean | AddEventListenerOptions", nullable = true)),
                        returns = VOID
                ),
                f("removeEventListener", parameters = listOf(
                        p(name = "type", type = "string"),
                        p("listener",
                                callback = callback(parameters = listOf(p("ev", "Event")), returns = rt("?")), nullable = false),
                        p(name = "options", type = "boolean | AddEventListenerOptions", nullable = true)),
                        returns = VOID
                )
        )
)


internal val JsElementClass = c(
        className = "Element",
        extends = listOf("Node", "ParentNode", "NonDocumentTypeChildNode", "ChildNode", "Slotable", "Animatable"),
        properties = listOf(
                p(name = "assignedSlot", type = "HTMLSlotElement", nullable = true, readonly = true),
                p(name = "attributes", type = "NamedNodeMap", readonly = true),
                p(name = "classList", type = "DOMTokenList", readonly = true, comment = "Allows for manipulation of element's class content attribute as a set of whitespace-separated tokens through a DOMTokenList object."),
                p(name = "className", type = "string", comment = "Returns the value of element's class content attribute. Can be set to change it."),
                p(name = "clientHeight", type = "number", readonly = true),
                p(name = "clientLeft", type = "number", readonly = true),
                p(name = "clientTop", type = "number", readonly = true),
                p(name = "clientWidth", type = "number", readonly = true),
                p(name = "id", type = "string", comment = "Returns the value of element's id content attribute. Can be set to change it."),
                p(name = "innerHTML", type = "string"),
                p(name = "localName", type = "string", readonly = true, comment = "Returns the local name."),
                p(name = "namespaceURI", type = "string", nullable = true, readonly = true, comment = "Returns the namespace."),
                p("onfullscreenchange", callback = callback(parameters = listOf(p(name = "this", type = "Element"), p("ev", "Event", comment = "The Event")), returns = rt("?")), nullable = true),
                p("onfullscreenerror", callback = callback(parameters = listOf(p("this", "Element"), p("ev", "Event")), returns = VOID), nullable = true),
                p(name = "outerHTML", type = "string"),
                p(name = "prefix", type = "string", nullable = true, readonly = true, comment = "Returns the namespace prefix."),
                p(name = "scrollHeight", type = "number", readonly = true),
                p(name = "scrollLeft", type = "number"),
                p(name = "scrollTop", type = "number"),
                p(name = "scrollWidth", type = "number", readonly = true),
                p(name = "shadowRoot", type = "ShadowRoot", nullable = true, readonly = true, comment = "Returns element's shadow root, if any, and if shadow root's mode is \"open\", and null otherwise."),
                p(name = "slot", type = "string", comment = "Returns the value of element's slot content attribute. Can be set to change it."),
                p(name = "tagName", type = "string", readonly = true, comment = "Returns the HTML-uppercased qualified name.")
        ),
        functions = listOf(
                f("attachShadow", parameters = listOf(p("init", "ShadowRootInit")), returns = rt("ShadowRoot"), comment = "Creates a shadow root for element and returns it."),
                f("closest", parameters = listOf(p("selector", "string")), returns = rt("Element", nullable = true), comment = "Returns the first (starting at element) inclusive ancestor that matches selectors, and null otherwise."),
                f("getAttribute", parameters = listOf(p("qualifiedName", "string")), returns = rt("string", nullable = true), comment = "Returns element's first attribute whose qualified name is qualifiedName, and null if there is no such attribute otherwise."),
                f("getAttributeNS", parameters = listOf(p(name = "namespace", type = "string", nullable = true), p("localName", "string")), returns = rt("string", nullable = true), comment = "Returns element's attribute whose namespace is namespace and local name is localName, and null if there is no such attribute otherwise."),
                f("getAttributeNames", returns = rt("string[]"), comment = "Returns the qualified names of all element's attributes. Can contain duplicates."),
                f("getAttributeNode", parameters = listOf(p("name", "string")), returns = rt("Attr", nullable = true)),
                f("getAttributeNodeNS", listOf(p(name = "namespaceURI", type = "string"), p("localName", "string")), returns = rt("Attr", nullable = true)),
                f("getBoundingClientRect", returns = rt("ClientRect | DOMRect")),
                f("getClientRects", returns = rt("ClientRectList | DOMRectList")),
                f("getElementsByClassName", listOf(p("classNames", "string")), returns = rt("HTMLCollectionOf<Element>")),
                f("getElementsByTagName", listOf(p("qualifiedName", "string")), returns = rt("HTMLCollectionOf<Element>")),
                f("getElementsByTagNameNS", listOf(p(name = "namespaceURI", type = "string"), p("localName", "string")), returns = rt("HTMLCollectionOf<Element>")),
                f("hasAttribute", listOf(p("qualifiedName", "string")), returns = rt("boolean"), comment = "Returns true if element has an attribute whose qualified name is qualifiedName, and false otherwise."),
                f("hasAttributeNS", listOf(p(name = "namespace", type = "string", nullable = true), p("localName", "string")), returns = rt("boolean"), comment = "Returns true if element has an attribute whose namespace is namespace and local name is localName."),
                f("hasAttributes", returns = rt("boolean"), comment = "Returns true if element has attributes, and false otherwise."),
                f("hasPointerCapture", listOf(p("pointerId", "number")), returns = rt("boolean")),
                f("insertAdjacentElement", listOf(p(name = "position", type = "InsertPosition"), p("insertedElement", "Element")), returns = rt("Element", nullable = true)),
                f("insertAdjacentHTML", listOf(p(name = "where", type = "InsertPosition"), p("html", "string")), returns = VOID),
                f("insertAdjacentText", listOf(p(name = "where", type = "InsertPosition"), p("text", "string")), returns = VOID),
                f("matches", listOf(p("selectors", "string")), returns = rt("boolean"), comment = "Returns true if matching selectors against element's root yields element, and false otherwise."),
                f("msGetRegionContent", returns = rt("any")),
                f("releasePointerCapture", listOf(p("pointerId", "number")), returns = VOID),
                f("removeAttribute", listOf(p("qualifiedName", "string")), returns = VOID, comment = "Removes element's first attribute whose qualified name is qualifiedName."),
                f("removeAttributeNS", listOf(p(name = "namespace", type = "string", nullable = true), p("localName", "string")), returns = VOID, comment = "Removes element's attribute whose namespace is namespace and local name is localName."),
                f("removeAttributeNode", listOf(p("attr", "Attr")), returns = rt("Attr")),
                f("requestFullscreen", listOf(p(name = "options", type = "FullscreenOptions", nullable = true)),
                        returns = rt("Promise<void>"),
                        comment = "Displays element fullscreen and resolves promise when done.\n" +
                                "When supplied, options's navigationUI member indicates whether showing\n" +
                                "navigation UI while in fullscreen is preferred or not. If set to \"show\", navigation\n" +
                                "simplicity is preferred over screen space, and if set to \"hide\", more screen space\n" +
                                "is preferred. User agents are always free to honor user preference over the application's. The\n" +
                                "default value \"auto\" indicates no application preference."),
                f("requestPointerLock", returns = VOID),
                f("scroll", listOf(p(name = "options", type = "ScrollToOptions", nullable = true)), returns = VOID),
                f("scroll", listOf(p(name = "x", type = "number"), p("y", "number")), returns = VOID),
                f("scrollBy", listOf(p(name = "options", type = "ScrollToOptions", nullable = true)), returns = VOID),
                f("scrollBy", listOf(p(name = "x", type = "number"), p("y", "number")), returns = VOID),
                f("scrollIntoView", listOf(p(name = "arg", type = "boolean | ScrollIntoViewOptions", nullable = true)), returns = VOID),
                f("scrollTo", listOf(p(name = "options", type = "ScrollToOptions", nullable = true)), returns = VOID),
                f("scrollTo", listOf(p(name = "x", type = "number"), p("y", "number")), returns = VOID),
                f("setAttribute", listOf(p(name = "qualifiedName", type = "string"), p("value", "string")), returns = VOID, comment = "Sets the value of element's first attribute whose qualified name is qualifiedName to value."),
                f("setAttributeNS", listOf(p(name = "namespace", type = "string", nullable = true), p(name = "qualifiedName", type = "string"), p("value", "string")), returns = VOID, comment = "Sets the value of element's attribute whose namespace is namespace and local name is localName to value."),
                f("setAttributeNode", listOf(p("attr", "Attr")), returns = rt("Attr", nullable = true)),
                f("setAttributeNodeNS", listOf(p("attr", "Attr")), returns = rt("Attr", nullable = true)),
                f("setPointerCapture", listOf(p("pointerId", "number")), returns = VOID),
                f("toggleAttribute", listOf(p(name = "qualifiedName", type = "string"), p(name = "force", type = "boolean", nullable = true)), returns = rt("boolean"), comment = "If force is not given, \"toggles\" qualifiedName, removing it if it is present and adding it if it is not present. If force is true, adds qualifiedName. If force is false, removes qualifiedName. Returns true if qualifiedName is now present, and false otherwise."),
                f("webkitMatchesSelector", listOf(p("selectors", "string")), returns = rt("boolean")),
                f("addEventListener", listOf(p(name = "type", type = "string"), p(name = "listener", callback = callback(listOf(p("ev", "Event")))), p(name = "options", type = "boolean | AddEventListenerOptions", nullable = true)), returns = VOID),
                f("removeEventListener", listOf(p(name = "type", type = "string"), p(name = "listener", type = "EventListenerOrEventListenerObject"), p(name = "options", type = "boolean | EventListenerOptions", nullable = true)), returns = VOID)
        )
)

/** The CSSStyleDeclaration API represents an object that is a CSS declaration block, that exposes style information and various style-related getMethods and properties. */
val JsClassCSSStyleDeclaration = c(
        className = "CSSStyleDeclaration ",
        comment = "The CSSStyleDeclaration API represents an object that is a CSS declaration block, that exposes style information and various style-related getMethods and properties.",
        properties = listOf(
                p(name = "alignContent", type = "string", nullable = true),
                p(name = "alignItems", type = "string", nullable = true),
                p(name = "alignSelf", type = "string", nullable = true),
                p(name = "alignmentBaseline", type = "string", nullable = true),
                p(name = "animation", type = "string"),
                p(name = "animationDelay", type = "string"),
                p(name = "animationDirection", type = "string"),
                p(name = "animationDuration", type = "string"),
                p(name = "animationFillMode", type = "string"),
                p(name = "animationIterationCount", type = "string"),
                p(name = "animationName", type = "string"),
                p(name = "animationPlayState", type = "string"),
                p(name = "animationTimingFunction", type = "string"),
                p(name = "backfaceVisibility", type = "string", nullable = true),
                p(name = "background", type = "string", nullable = true),
                p(name = "backgroundAttachment", type = "string", nullable = true),
                p(name = "backgroundClip", type = "string", nullable = true),
                p(name = "backgroundColor", type = "string", nullable = true),
                p(name = "backgroundImage", type = "string", nullable = true),
                p(name = "backgroundOrigin", type = "string", nullable = true),
                p(name = "backgroundPosition", type = "string", nullable = true),
                p(name = "backgroundPositionX", type = "string", nullable = true),
                p(name = "backgroundPositionY", type = "string", nullable = true),
                p(name = "backgroundRepeat", type = "string", nullable = true),
                p(name = "backgroundSize", type = "string", nullable = true),
                p(name = "baselineShift", type = "string", nullable = true),
                p(name = "border", type = "string", nullable = true),
                p(name = "borderBottom", type = "string", nullable = true),
                p(name = "borderBottomColor", type = "string", nullable = true),
                p(name = "borderBottomLeftRadius", type = "string", nullable = true),
                p(name = "borderBottomRightRadius", type = "string", nullable = true),
                p(name = "borderBottomStyle", type = "string", nullable = true),
                p(name = "borderBottomWidth", type = "string", nullable = true),
                p(name = "borderCollapse", type = "string", nullable = true),
                p(name = "borderColor", type = "string", nullable = true),
                p(name = "borderImage", type = "string", nullable = true),
                p(name = "borderImageOutset", type = "string", nullable = true),
                p(name = "borderImageRepeat", type = "string", nullable = true),
                p(name = "borderImageSlice", type = "string", nullable = true),
                p(name = "borderImageSource", type = "string", nullable = true),
                p(name = "borderImageWidth", type = "string", nullable = true),
                p(name = "borderLeft", type = "string", nullable = true),
                p(name = "borderLeftColor", type = "string", nullable = true),
                p(name = "borderLeftStyle", type = "string", nullable = true),
                p(name = "borderLeftWidth", type = "string", nullable = true),
                p(name = "borderRadius", type = "string", nullable = true),
                p(name = "borderRight", type = "string", nullable = true),
                p(name = "borderRightColor", type = "string", nullable = true),
                p(name = "borderRightStyle", type = "string", nullable = true),
                p(name = "borderRightWidth", type = "string", nullable = true),
                p(name = "borderSpacing", type = "string", nullable = true),
                p(name = "borderStyle", type = "string", nullable = true),
                p(name = "borderTop", type = "string", nullable = true),
                p(name = "borderTopColor", type = "string", nullable = true),
                p(name = "borderTopLeftRadius", type = "string", nullable = true),
                p(name = "borderTopRightRadius", type = "string", nullable = true),
                p(name = "borderTopStyle", type = "string", nullable = true),
                p(name = "borderTopWidth", type = "string", nullable = true),
                p(name = "borderWidth", type = "string", nullable = true),
                p(name = "bottom", type = "string", nullable = true),
                p(name = "boxShadow", type = "string", nullable = true),
                p(name = "boxSizing", type = "string", nullable = true),
                p(name = "breakAfter", type = "string", nullable = true),
                p(name = "breakBefore", type = "string", nullable = true),
                p(name = "breakInside", type = "string", nullable = true),
                p(name = "captionSide", type = "string", nullable = true),
                p(name = "clear", type = "string", nullable = true),
                p(name = "clip", type = "string", nullable = true),
                p(name = "clipPath", type = "string", nullable = true),
                p(name = "clipRule", type = "string", nullable = true),
                p(name = "color", type = "string", nullable = true),
                p(name = "colorInterpolationFilters", type = "string", nullable = true),
                p(name = "columnCount", type = "any"),
                p(name = "columnFill", type = "string", nullable = true),
                p(name = "columnGap", type = "any"),
                p(name = "columnRule", type = "string", nullable = true),
                p(name = "columnRuleColor", type = "any"),
                p(name = "columnRuleStyle", type = "string", nullable = true),
                p(name = "columnRuleWidth", type = "any"),
                p(name = "columnSpan", type = "string", nullable = true),
                p(name = "columnWidth", type = "any"),
                p(name = "columns", type = "string", nullable = true),
                p(name = "content", type = "string", nullable = true),
                p(name = "counterIncrement", type = "string", nullable = true),
                p(name = "counterReset", type = "string", nullable = true),
                p(name = "cssFloat", type = "string", nullable = true),
                p(name = "cssText", type = "string"),
                p(name = "cursor", type = "string", nullable = true),
                p(name = "direction", type = "string", nullable = true),
                p(name = "display", type = "string", nullable = true),
                p(name = "dominantBaseline", type = "string", nullable = true),
                p(name = "emptyCells", type = "string", nullable = true),
                p(name = "enableBackground", type = "string", nullable = true),
                p(name = "fill", type = "string", nullable = true),
                p(name = "fillOpacity", type = "string", nullable = true),
                p(name = "fillRule", type = "string", nullable = true),
                p(name = "filter", type = "string", nullable = true),
                p(name = "flex", type = "string", nullable = true),
                p(name = "flexBasis", type = "string", nullable = true),
                p(name = "flexDirection", type = "string", nullable = true),
                p(name = "flexFlow", type = "string", nullable = true),
                p(name = "flexGrow", type = "string", nullable = true),
                p(name = "flexShrink", type = "string", nullable = true),
                p(name = "flexWrap", type = "string", nullable = true),
                p(name = "floodColor", type = "string", nullable = true),
                p(name = "floodOpacity", type = "string", nullable = true),
                p(name = "font", type = "string", nullable = true),
                p(name = "fontFamily", type = "string", nullable = true),
                p(name = "fontFeatureSettings", type = "string", nullable = true),
                p(name = "fontSize", type = "string", nullable = true),
                p(name = "fontSizeAdjust", type = "string", nullable = true),
                p(name = "fontStretch", type = "string", nullable = true),
                p(name = "fontStyle", type = "string", nullable = true),
                p(name = "fontVariant", type = "string", nullable = true),
                p(name = "fontWeight", type = "string", nullable = true),
                p(name = "gap", type = "string", nullable = true),
                p(name = "glyphOrientationHorizontal", type = "string", nullable = true),
                p(name = "glyphOrientationVertical", type = "string", nullable = true),
                p(name = "grid", type = "string", nullable = true),
                p(name = "gridArea", type = "string", nullable = true),
                p(name = "gridAutoColumns", type = "string", nullable = true),
                p(name = "gridAutoFlow", type = "string", nullable = true),
                p(name = "gridAutoRows", type = "string", nullable = true),
                p(name = "gridColumn", type = "string", nullable = true),
                p(name = "gridColumnEnd", type = "string", nullable = true),
                p(name = "gridColumnGap", type = "string", nullable = true),
                p(name = "gridColumnStart", type = "string", nullable = true),
                p(name = "gridGap", type = "string", nullable = true),
                p(name = "gridRow", type = "string", nullable = true),
                p(name = "gridRowEnd", type = "string", nullable = true),
                p(name = "gridRowGap", type = "string", nullable = true),
                p(name = "gridRowStart", type = "string", nullable = true),
                p(name = "gridTemplate", type = "string", nullable = true),
                p(name = "gridTemplateAreas", type = "string", nullable = true),
                p(name = "gridTemplateColumns", type = "string", nullable = true),
                p(name = "gridTemplateRows", type = "string", nullable = true),
                p(name = "height", type = "string", nullable = true),
                p(name = "imeMode", type = "string", nullable = true),
                p(name = "justifyContent", type = "string", nullable = true),
                p(name = "justifyItems", type = "string", nullable = true),
                p(name = "justifySelf", type = "string", nullable = true),
                p(name = "kerning", type = "string", nullable = true),
                p(name = "layoutGrid", type = "string", nullable = true),
                p(name = "layoutGridChar", type = "string", nullable = true),
                p(name = "layoutGridLine", type = "string", nullable = true),
                p(name = "layoutGridMode", type = "string", nullable = true),
                p(name = "layoutGridType", type = "string", nullable = true),
                p(name = "left", type = "string", nullable = true),
                p(name = "length", type = "number", readonly = true),
                p(name = "letterSpacing", type = "string", nullable = true),
                p(name = "lightingColor", type = "string", nullable = true),
                p(name = "lineBreak", type = "string", nullable = true),
                p(name = "lineHeight", type = "string", nullable = true),
                p(name = "listStyle", type = "string", nullable = true),
                p(name = "listStyleImage", type = "string", nullable = true),
                p(name = "listStylePosition", type = "string", nullable = true),
                p(name = "listStyleType", type = "string", nullable = true),
                p(name = "margin", type = "string", nullable = true),
                p(name = "marginBottom", type = "string", nullable = true),
                p(name = "marginLeft", type = "string", nullable = true),
                p(name = "marginRight", type = "string", nullable = true),
                p(name = "marginTop", type = "string", nullable = true),
                p(name = "marker", type = "string", nullable = true),
                p(name = "markerEnd", type = "string", nullable = true),
                p(name = "markerMid", type = "string", nullable = true),
                p(name = "markerStart", type = "string", nullable = true),
                p(name = "mask", type = "string", nullable = true),
                p(name = "maskImage", type = "string", nullable = true),
                p(name = "maxHeight", type = "string", nullable = true),
                p(name = "maxWidth", type = "string", nullable = true),
                p(name = "minHeight", type = "string", nullable = true),
                p(name = "minWidth", type = "string", nullable = true),
                p(name = "msContentZoomChaining", type = "string", nullable = true),
                p(name = "msContentZoomLimit", type = "string", nullable = true),
                p(name = "msContentZoomLimitMax", type = "any"),
                p(name = "msContentZoomLimitMin", type = "any"),
                p(name = "msContentZoomSnap", type = "string", nullable = true),
                p(name = "msContentZoomSnapPoints", type = "string", nullable = true),
                p(name = "msContentZoomSnapType", type = "string", nullable = true),
                p(name = "msContentZooming", type = "string", nullable = true),
                p(name = "msFlowFrom", type = "string", nullable = true),
                p(name = "msFlowInto", type = "string", nullable = true),
                p(name = "msFontFeatureSettings", type = "string", nullable = true),
                p(name = "msGridColumn", type = "any"),
                p(name = "msGridColumnAlign", type = "string", nullable = true),
                p(name = "msGridColumnSpan", type = "any"),
                p(name = "msGridColumns", type = "string", nullable = true),
                p(name = "msGridRow", type = "any"),
                p(name = "msGridRowAlign", type = "string", nullable = true),
                p(name = "msGridRowSpan", type = "any"),
                p(name = "msGridRows", type = "string", nullable = true),
                p(name = "msHighContrastAdjust", type = "string", nullable = true),
                p(name = "msHyphenateLimitChars", type = "string", nullable = true),
                p(name = "msHyphenateLimitLines", type = "any"),
                p(name = "msHyphenateLimitZone", type = "any"),
                p(name = "msHyphens", type = "string", nullable = true),
                p(name = "msImeAlign", type = "string", nullable = true),
                p(name = "msOverflowStyle", type = "string", nullable = true),
                p(name = "msScrollChaining", type = "string", nullable = true),
                p(name = "msScrollLimit", type = "string", nullable = true),
                p(name = "msScrollLimitXMax", type = "any"),
                p(name = "msScrollLimitXMin", type = "any"),
                p(name = "msScrollLimitYMax", type = "any"),
                p(name = "msScrollLimitYMin", type = "any"),
                p(name = "msScrollRails", type = "string", nullable = true),
                p(name = "msScrollSnapPointsX", type = "string", nullable = true),
                p(name = "msScrollSnapPointsY", type = "string", nullable = true),
                p(name = "msScrollSnapType", type = "string", nullable = true),
                p(name = "msScrollSnapX", type = "string", nullable = true),
                p(name = "msScrollSnapY", type = "string", nullable = true),
                p(name = "msScrollTranslation", type = "string", nullable = true),
                p(name = "msTextCombineHorizontal", type = "string", nullable = true),
                p(name = "msTextSizeAdjust", type = "any"),
                p(name = "msTouchAction", type = "string", nullable = true),
                p(name = "msTouchSelect", type = "string", nullable = true),
                p(name = "msUserSelect", type = "string", nullable = true),
                p(name = "msWrapFlow", type = "string"),
                p(name = "msWrapMargin", type = "any"),
                p(name = "msWrapThrough", type = "string"),
                p(name = "objectFit", type = "string", nullable = true),
                p(name = "objectPosition", type = "string", nullable = true),
                p(name = "opacity", type = "string", nullable = true),
                p(name = "order", type = "string", nullable = true),
                p(name = "orphans", type = "string", nullable = true),
                p(name = "outline", type = "string", nullable = true),
                p(name = "outlineColor", type = "string", nullable = true),
                p(name = "outlineOffset", type = "string", nullable = true),
                p(name = "outlineStyle", type = "string", nullable = true),
                p(name = "outlineWidth", type = "string", nullable = true),
                p(name = "overflow", type = "string", nullable = true),
                p(name = "overflowX", type = "string", nullable = true),
                p(name = "overflowY", type = "string", nullable = true),
                p(name = "padding", type = "string", nullable = true),
                p(name = "paddingBottom", type = "string", nullable = true),
                p(name = "paddingLeft", type = "string", nullable = true),
                p(name = "paddingRight", type = "string", nullable = true),
                p(name = "paddingTop", type = "string", nullable = true),
                p(name = "pageBreakAfter", type = "string", nullable = true),
                p(name = "pageBreakBefore", type = "string", nullable = true),
                p(name = "pageBreakInside", type = "string", nullable = true),
                p(name = "parentRule", type = "CSSRule", readonly = true),
                p(name = "penAction", type = "string", nullable = true),
                p(name = "perspective", type = "string", nullable = true),
                p(name = "perspectiveOrigin", type = "string", nullable = true),
                p(name = "pointerEvents", type = "string", nullable = true),
                p(name = "position", type = "string", nullable = true),
                p(name = "quotes", type = "string", nullable = true),
                p(name = "resize", type = "string", nullable = true),
                p(name = "right", type = "string", nullable = true),
                p(name = "rotate", type = "string", nullable = true),
                p(name = "rowGap", type = "string", nullable = true),
                p(name = "rubyAlign", type = "string", nullable = true),
                p(name = "rubyOverhang", type = "string", nullable = true),
                p(name = "rubyPosition", type = "string", nullable = true),
                p(name = "scale", type = "string", nullable = true),
                p(name = "scrollBehavior", type = "string"),
                p(name = "stopColor", type = "string", nullable = true),
                p(name = "stopOpacity", type = "string", nullable = true),
                p(name = "stroke", type = "string", nullable = true),
                p(name = "strokeDasharray", type = "string", nullable = true),
                p(name = "strokeDashoffset", type = "string", nullable = true),
                p(name = "strokeLinecap", type = "string", nullable = true),
                p(name = "strokeLinejoin", type = "string", nullable = true),
                p(name = "strokeMiterlimit", type = "string", nullable = true),
                p(name = "strokeOpacity", type = "string", nullable = true),
                p(name = "strokeWidth", type = "string", nullable = true),
                p(name = "tableLayout", type = "string", nullable = true),
                p(name = "textAlign", type = "string", nullable = true),
                p(name = "textAlignLast", type = "string", nullable = true),
                p(name = "textAnchor", type = "string", nullable = true),
                p(name = "textCombineUpright", type = "string", nullable = true),
                p(name = "textDecoration", type = "string", nullable = true),
                p(name = "textIndent", type = "string", nullable = true),
                p(name = "textJustify", type = "string", nullable = true),
                p(name = "textKashida", type = "string", nullable = true),
                p(name = "textKashidaSpace", type = "string", nullable = true),
                p(name = "textOverflow", type = "string", nullable = true),
                p(name = "textShadow", type = "string", nullable = true),
                p(name = "textTransform", type = "string", nullable = true),
                p(name = "textUnderlinePosition", type = "string", nullable = true),
                p(name = "top", type = "string", nullable = true),
                p(name = "touchAction", type = "string"),
                p(name = "transform", type = "string", nullable = true),
                p(name = "transformOrigin", type = "string", nullable = true),
                p(name = "transformStyle", type = "string", nullable = true),
                p(name = "transition", type = "string"),
                p(name = "transitionDelay", type = "string"),
                p(name = "transitionDuration", type = "string"),
                p(name = "transitionProperty", type = "string"),
                p(name = "transitionTimingFunction", type = "string"),
                p(name = "translate", type = "string", nullable = true),
                p(name = "unicodeBidi", type = "string", nullable = true),
                p(name = "userSelect", type = "string", nullable = true),
                p(name = "verticalAlign", type = "string", nullable = true),
                p(name = "visibility", type = "string", nullable = true),
                p(name = "webkitAlignContent", type = "string"),
                p(name = "webkitAlignItems", type = "string"),
                p(name = "webkitAlignSelf", type = "string"),
                p(name = "webkitAnimation", type = "string"),
                p(name = "webkitAnimationDelay", type = "string"),
                p(name = "webkitAnimationDirection", type = "string"),
                p(name = "webkitAnimationDuration", type = "string"),
                p(name = "webkitAnimationFillMode", type = "string"),
                p(name = "webkitAnimationIterationCount", type = "string"),
                p(name = "webkitAnimationName", type = "string"),
                p(name = "webkitAnimationPlayState", type = "string"),
                p(name = "webkitAnimationTimingFunction", type = "string"),
                p(name = "webkitAppearance", type = "string"),
                p(name = "webkitBackfaceVisibility", type = "string"),
                p(name = "webkitBackgroundClip", type = "string"),
                p(name = "webkitBackgroundOrigin", type = "string"),
                p(name = "webkitBackgroundSize", type = "string"),
                p(name = "webkitBorderBottomLeftRadius", type = "string"),
                p(name = "webkitBorderBottomRightRadius", type = "string"),
                p(name = "webkitBorderImage", type = "string", nullable = true),
                p(name = "webkitBorderRadius", type = "string"),
                p(name = "webkitBorderTopLeftRadius", type = "string"),
                p(name = "webkitBorderTopRightRadius", type = "string"),
                p(name = "webkitBoxAlign", type = "string"),
                p(name = "webkitBoxDirection", type = "string", nullable = true),
                p(name = "webkitBoxFlex", type = "string"),
                p(name = "webkitBoxOrdinalGroup", type = "string"),
                p(name = "webkitBoxOrient", type = "string", nullable = true),
                p(name = "webkitBoxPack", type = "string"),
                p(name = "webkitBoxShadow", type = "string"),
                p(name = "webkitBoxSizing", type = "string"),
                p(name = "webkitColumnBreakAfter", type = "string", nullable = true),
                p(name = "webkitColumnBreakBefore", type = "string", nullable = true),
                p(name = "webkitColumnBreakInside", type = "string", nullable = true),
                p(name = "webkitColumnCount", type = "any"),
                p(name = "webkitColumnGap", type = "any"),
                p(name = "webkitColumnRule", type = "string", nullable = true),
                p(name = "webkitColumnRuleColor", type = "any"),
                p(name = "webkitColumnRuleStyle", type = "string", nullable = true),
                p(name = "webkitColumnRuleWidth", type = "any"),
                p(name = "webkitColumnSpan", type = "string", nullable = true),
                p(name = "webkitColumnWidth", type = "any"),
                p(name = "webkitColumns", type = "string", nullable = true),
                p(name = "webkitFilter", type = "string", deprecated = true),
                p(name = "webkitFlex", type = "string", deprecated = true),
                p(name = "webkitFlexBasis", type = "string", deprecated = true),
                p(name = "webkitFlexDirection", type = "string", deprecated = true),
                p(name = "webkitFlexFlow", type = "string", deprecated = true),
                p(name = "webkitFlexGrow", type = "string", deprecated = true),
                p(name = "webkitFlexShrink", type = "string", deprecated = true),
                p(name = "webkitFlexWrap", type = "string", deprecated = true),
                p(name = "webkitJustifyContent", type = "string", deprecated = true),
                p(name = "webkitMask", type = "string", deprecated = true),
                p(name = "webkitMaskBoxImage", type = "string", deprecated = true),
                p(name = "webkitMaskBoxImageOutset", type = "string", deprecated = true),
                p(name = "webkitMaskBoxImageRepeat", type = "string", deprecated = true),
                p(name = "webkitMaskBoxImageSlice", type = "string", deprecated = true),
                p(name = "webkitMaskBoxImageSource", type = "string", deprecated = true),
                p(name = "webkitMaskBoxImageWidth", type = "string", deprecated = true),
                p(name = "webkitMaskClip", type = "string", deprecated = true),
                p(name = "webkitMaskComposite", type = "string", deprecated = true),
                p(name = "webkitMaskImage", type = "string", deprecated = true),
                p(name = "webkitMaskOrigin", type = "string", deprecated = true),
                p(name = "webkitMaskPosition", type = "string", deprecated = true),
                p(name = "webkitMaskRepeat", type = "string", deprecated = true),
                p(name = "webkitMaskSize", type = "string", deprecated = true),
                p(name = "webkitOrder", type = "string", deprecated = true),
                p(name = "webkitPerspective", type = "string", deprecated = true),
                p(name = "webkitPerspectiveOrigin", type = "string", deprecated = true),
                p(name = "webkitTapHighlightColor", type = "string", nullable = true),
                p(name = "webkitTextFillColor", type = "string", deprecated = true),
                p(name = "webkitTextSizeAdjust", type = "string", deprecated = true),
                p(name = "webkitTextStroke", type = "string", deprecated = true),
                p(name = "webkitTextStrokeColor", type = "string", deprecated = true),
                p(name = "webkitTextStrokeWidth", type = "string", deprecated = true),
                p(name = "webkitTransform", type = "string", deprecated = true),
                p(name = "webkitTransformOrigin", type = "string", deprecated = true),
                p(name = "webkitTransformStyle", type = "string", deprecated = true),
                p(name = "webkitTransition", type = "string", deprecated = true),
                p(name = "webkitTransitionDelay", type = "string", deprecated = true),
                p(name = "webkitTransitionDuration", type = "string", deprecated = true),
                p(name = "webkitTransitionProperty", type = "string", deprecated = true),
                p(name = "webkitTransitionTimingFunction", type = "string", deprecated = true),
                p(name = "webkitUserModify", type = "string", nullable = true),
                p(name = "webkitUserSelect", type = "string", nullable = true),
                p(name = "webkitWritingMode", type = "string", nullable = true),
                p(name = "whiteSpace", type = "string", nullable = true),
                p(name = "widows", type = "string", nullable = true),
                p(name = "width", type = "string", nullable = true),
                p(name = "wordBreak", type = "string", nullable = true),
                p(name = "wordSpacing", type = "string", nullable = true),
                p(name = "wordWrap", type = "string", nullable = true),
                p(name = "writingMode", type = "string", nullable = true),
                p(name = "zIndex", type = "string", nullable = true),
                p(name = "zoom", type = "string", nullable = true)
        ),
        functions = listOf(
                f("getPropertyPriority", listOf(p("propertyName", "string")), returns = RT_STRING),
                f("getPropertyValue", listOf(p("propertyName", "string")), returns = RT_STRING),
                f("item", listOf(p("index", "number")), returns = RT_STRING),
                f("removeProperty", listOf(p("propertyName", "string")), returns = RT_STRING),
                f("setProperty",
                        parameters = listOf(
                                p(name = "propertyName", type = "string|Symbol"),
                                p(name = "value", type = "string", nullable = true),
                                p(name = "priority", type = "string", nullable = true)
                        ),
                        returns = VOID)
        )
)

val JsClassAnimatable = c(
        className = "Animatable",
        isStruct = true,
        functions = listOf(
                f("animate", listOf(p("keyframes", "Array<Keyframe> | PropertyIndexedKeyframes", nullable = true), p(name = "options", type = "number | KeyframeAnimationOptions", nullable = true)), returns = rt("Animation")),
                f("getAnimations", returns = rt("Animation[]"))
        )
)

internal val JsClassChildNode = c(
        className = "ChildNode",
        isStruct = true,
        functions = listOf(
                f("after", listOf(p("nodes", "Node|string", varArgs = true)), returns = VOID, comment =
                "Inserts nodes just after node, while replacing strings in nodes with equivalent Text nodes.\n" +
                        "Throws a \"HierarchyRequestError\" DOMException if the constraints of\n" +
                        "the node tree are violated."),
                f("before", listOf(p("...nodes", "Node[]|string[]")), returns = VOID, comment =
                "Inserts nodes just before node, while replacing strings in nodes with equivalent Text nodes.\n" +
                        "Throws a \"HierarchyRequestError\" DOMException if the constraints of\n" +
                        "the node tree are violated."),
                /**
                 *
                 */
                f("remove", returns = VOID, comment = "Removes node."),
                /**
                 * Replaces node with nodes, while replacing strings in nodes with equivalent Text nodes.
                 * Throws a "HierarchyRequestError" DOMException if the constraints of
                 * the node tree are violated.
                 */
                f("replaceWith", listOf(p("nodes", "Node|string", varArgs = true)), returns = VOID)
        )
)

internal val JsClassElementCSSInlineStyle = c(
        className = "ElementCSSInlineStyle",
        isStruct = true,
        properties = listOf(p(name = "style", type = "CSSStyleDeclaration", readonly = true))
)

internal val JsClassEventTarget = c(
        className = "EventTarget",
        comment = "EventTarget is an interface implemented by objects that can receive events and may have listeners for them.",
        functions = listOf(
                f("addEventListener", listOf(p(name = "type", type = "string"), p(name = "listener", type = "EventListenerOrEventListenerObject", nullable = true), p(name = "options", type = "boolean | AddEventListenerOptions", nullable = true)), returns = VOID, comment = "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n" +
                        "The options argument sets listener-specific options. For compatibility this can be a\n" +
                        "boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n" +
                        "When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n" +
                        "When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\n" +
                        "When set to true, options's once indicates that the callback will only be invoked once after which the event listener will\n" +
                        "be removed.\n" +
                        "The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture."),
                f("dispatchEvent", listOf(p("event", "Event")), returns = rt("BOOL"), comment = "Dispatches a synthetic event event to target and returns true\n" +
                        "if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise."),
                f("removeEventListener", listOf(p(name = "type", type = "string"), p(name = "callback", type = "EventListenerOrEventListenerObject", nullable = true), p(name = "options", type = "EventListenerOptions | boolean", nullable = true)), returns = VOID, comment = "Removes the event listener in target's event listener list with the same type, callback, and options."),
                f("addEventListener", listOf(p(name = "type", type = "string"), p(name = "listener", type = "EventListenerOrEventListenerObject | null"), p(name = "options", type = "boolean | AddEventListenerOptions", nullable = true)), returns = VOID, comment = "Appends an event listener for events whose type attribute value is type. The callback argument sets the callback that will be invoked when the event is dispatched.\n" +
                        " The options argument sets listener-specific options. For compatibility this can be a\n" +
                        " boolean, in which case the method behaves exactly as if the value was specified as options's capture.\n" +
                        " When set to true, options's capture prevents callback from being invoked when the event's eventPhase attribute value is BUBBLING_PHASE. When false (or not present), callback will not be invoked when event's eventPhase attribute value is CAPTURING_PHASE. Either way, callback will be invoked if event's eventPhase attribute value is AT_TARGET.\n" +
                        " When set to true, options's passive indicates that the callback will not cancel the event by invoking preventDefault(). This is used to enable performance optimizations described in §2.8 Observing event listeners.\n" +
                        " When set to true, options's once indicates that the callback will only be invoked once after which the event listener will\n" +
                        " be removed.\n" +
                        " The event listener is appended to target's event listener list and is not appended if it has the same type, callback, and capture."),
                f("dispatchEvent", listOf(p("event", "Event")), returns = RT_BOOL, comment = "Dispatches a synthetic event event to target and returns true\n" +
                        " if either event's cancelable attribute value is false or its preventDefault() method was not invoked, and false otherwise."),
                f("removeEventListener", listOf(p(name = "type", type = "string"), p(name = "callback", callback = callback(listOf(p("ev", "Event"))), nullable = true), p(name = "options", type = "EventListenerOptions | boolean", nullable = true)), returns = VOID, comment = "Removes the event listener in target's event listener list with the same type, callback, and options.")
        )
)

internal val JsClassNode = c(
        className = "Node",
        extends = listOf("EventTarget"),
        properties = listOf(
                p(name = "baseURI", type = "string", readonly = true, comment = "Returns node's node document's document base URL."),
                p(name = "childNodes", type = "NodeListOf<ChildNode>", readonly = true, comment = "Returns the children"),
                p(name = "firstChild", type = "ChildNode", readonly = true, nullable = true, comment = "Returns the first child."),
                p(name = "isConnected", type = "boolean", readonly = true, comment = "Returns true if node is connected and false otherwise."),
                p(name = "lastChild", type = "ChildNode", readonly = true, comment = "Returns the last child.", nullable = true),
                p(name = "namespaceURI", type = "string", readonly = true, deprecated = true, nullable = true),
                p(name = "nextSibling", type = "ChildNode", readonly = true, comment = "Returns the next sibling", nullable = true),
                p(name = "nodeName", type = "string", readonly = true, comment = "Returns a string appropriate for the type of node"),
                p(name = "nodeType", type = "number", readonly = true),
                p(name = "nodeValue", type = "string", nullable = true),
                p(name = "ownerDocument", type = "Document", nullable = true, readonly = true, comment = "Returns the node document. *returns null for documents"),
                p(name = "parentElement", type = "HTMLElement", readonly = true, nullable = true, comment = "Returns the parent element."),
                p(name = "parentNode", type = "Node & ParentNode", readonly = true, nullable = true, comment = "Returns the parent."),
                p(name = "previousSibling", type = "Node", nullable = true, readonly = true, comment = "Returns the previous sibling."),
                p(name = "textContent", type = "string", nullable = true),
                p(name = "ATTRIBUTE_NODE", type = "number", readonly = true),
                p(name = "CDATA_SECTION_NODE", type = "number", readonly = true),
                p(name = "COMMENT_NODE", type = "number", readonly = true),
                p(name = "DOCUMENT_FRAGMENT_NODE", type = "number", readonly = true),
                p(name = "DOCUMENT_NODE", type = "number", readonly = true),
                p(name = "DOCUMENT_POSITION_CONTAINED_BY", type = "number", readonly = true),
                p(name = "DOCUMENT_POSITION_CONTAINS", type = "number", readonly = true),
                p(name = "DOCUMENT_POSITION_DISCONNECTED", type = "number", readonly = true),
                p(name = "DOCUMENT_POSITION_FOLLOWING", type = "number", readonly = true),
                p(name = "DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC", type = "number", readonly = true),
                p(name = "DOCUMENT_POSITION_PRECEDING", type = "number", readonly = true),
                p(name = "DOCUMENT_TYPE_NODE", type = "number", readonly = true),
                p(name = "ELEMENT_NODE", type = "number", readonly = true),
                p(name = "ENTITY_NODE", type = "number", readonly = true),
                p(name = "ENTITY_REFERENCE_NODE", type = "number", readonly = true),
                p(name = "NOTATION_NODE", type = "number", readonly = true),
                p(name = "PROCESSING_INSTRUCTION_NODE", type = "number", readonly = true),
                p(name = "TEXT_NODE", type = "number", readonly = true)
        ),
        functions = listOf(
                f("appendChild", listOf(p("newChild", "Node")), returns = rt("Node")),
                f("cloneNode", listOf(p(name = "deep", type = "boolean", nullable = true)), returns = rt("Node"), comment = "Returns a copy of node. If deep is true, the copy also includes the node's descendants."),
                f("compareDocumentPosition", listOf(p("other", "Node")), returns = RT_NUMBER),
                f("contains", listOf(p("other", "Node", nullable = true)), returns = RT_BOOL, comment = "Returns true if other is an inclusive descendant of node, and false otherwise."),
                f("getRootNode", listOf(p(name = "options", type = "GetRootNodeOptions", nullable = true)), returns = rt("Node"), comment = "Returns node's shadow-including root."),
                f("hasChildNodes", returns = RT_BOOL, comment = "Returns whether node has children."),
                f("insertBefore", listOf(p(name = "newChild", type = "Node"), p("refChild", "Node", nullable = true)), returns = rt("Node")),
                f("isDefaultNamespace", listOf(p("namespace", "string", nullable = true)), returns = RT_BOOL),
                f("isEqualNode", listOf(p("otherNode", "Node", nullable = true)), returns = RT_BOOL, comment = "Returns whether node and otherNode have the same properties."),
                f("isSameNode", listOf(p("otherNode", "Node", nullable = true)), returns = RT_BOOL),
                f("lookupNamespaceURI", listOf(p("prefix", "string", nullable = true)), returns = RT_STRING.copy(nullable = true)),
                f("lookupPrefix", listOf(p("namespace", "string", nullable = true)), returns = RT_STRING.copy(nullable = true)),
                f("normalize", returns = VOID, comment = "Removes empty exclusive Text nodes and concatenates the data of remaining contiguous exclusive Text nodes into the first of their nodes."),
                f("removeChild", listOf(p("oldChild", "Node")), returns = rt("Node")),
                f("replaceChild", listOf(p(name = "newChild", type = "Node"), p("oldChild", "Node")), returns = rt("Node"))
        )
)

internal val JsClassParentNode = c(
        className = "ParentNode",
        isStruct = true,
        properties = listOf(
                p(name = "childElementCount", type = "number", readonly = true),
                /**
                 * Returns the child elements.
                 */
                p(name = "children", type = "HTMLCollection", readonly = true),
                /**
                 * Returns the first child that is an element, and null otherwise.
                 */
                p(name = "firstElementChild", type = "Element | null", readonly = true),
                /**
                 * Returns the last child that is an element, and null otherwise.
                 */
                p(name = "lastElementChild", type = "Element | null", readonly = true)
        ),
        functions = listOf(
                /**
                 * Inserts nodes after the last child of node, while replacing
                 * strings in nodes with equivalent Text nodes.
                 * Throws a "HierarchyRequestError" DOMException if the constraints of
                 * the node tree are violated.
                 */
                f("append", listOf(p("...nodes", "Array<Node | string>")), returns = VOID),
                /**
                 *
                 */
                f("prepend", listOf(p("...nodes", "Array<Node | string>")), returns = VOID, comment =
                "Inserts nodes before the first child of node, while\n" +
                        " replacing strings in nodes with equivalent Text nodes.\n" +
                        " Throws a \"HierarchyRequestError\" DOMException if the constraints of\n" +
                        " the node tree are violated."),
                f("querySelector", listOf(p("selectors", "string")), returns = rt("Element", nullable = true), comment = "Returns the first element that is a descendant of node that matches selectors."),
                f("querySelectorAll", listOf(p("selectors", "string")), returns = rt("NodeListOf<Element>"), comment = "Returns all element descendants of node that match selectors.")
        )
)

internal val JsClassNonDocumentTypeChildNode = c(
        className = "NonDocumentTypeChildNode",
        isStruct = true,
        properties = listOf(
                p(name = "nextElementSibling", type = "Element | null", readonly = true, comment = "Returns the first following sibling that is an element, and null otherwise."),
                p(name = "previousElementSibling", type = "Element | null", readonly = true, comment = "Returns the first preceding sibling that is an element, and null otherwise.")
        )
)

internal val JsClassDocumentAndElementEventHandlers = c(
        className = "DocumentAndElementEventHandlers",
        isStruct = true,
        functions = listOf(
                f("oncopy", listOf(p("listener", callback = callback(parameters = listOf(p("ev", "ClipboardEvent")), returns = "?"), nullable = true))),
                f("oncut", listOf(p("listener", callback = callback(parameters = listOf(p("ev", "ClipboardEvent")), returns = "?"), nullable = true))),
                f("onpaste", listOf(p("listener", callback = callback(parameters = listOf(p("ev", "ClipboardEvent")), returns = "?"), nullable = true))),
                f("addEventListener", listOf(
                        p(name = "type", type = "string"),
                        p(name = "listener", callback = callback(listOf(p("ev", "Event")), returns = "?")),
                        p(name = "options", type = "boolean | AddEventListenerOptions", nullable = true)), returns = "void"),
                f("removeEventListener", listOf(p(name = "type", type = "string"), p(name = "listener", callback = callback(listOf(p("ev", "Event")), returns = "?")), p(name = "options", type = "boolean | EventListenerOptions", nullable = true)), returns = "void")

        )
)

internal val JsClassElementContentEditable = c(
        className = "ElementContentEditable",
        isStruct = true,
        properties = listOf(
                p(name = "contentEditable", type = "string"),
                p(name = "inputMode", type = "string"),
                p(name = "isContentEditable", type = "boolean", readonly = true)
        )
)

internal val JsClassHTMLOrSVGElement = c(
        className = "HTMLOrSVGElement",
        isStruct = true,
        properties = listOf(
                p(name = "dataset", type = "DOMStringMap", readonly = true),
                p("nonce", "string", nullable = true),
                p(name = "tabIndex", type = "number")
        ),
        functions = listOf(
                f("blur", returns = VOID),
                f("focus", listOf(p(name = "options", type = "FocusOptions", nullable = true)), returns = VOID)
        )
)