{
	parserClass="cappuccino.ide.intellij.plugin.comments.parser.ObjJDocCommentParser"
	implements="cappuccino.ide.intellij.plugin.comments.psi.api.ObjJDocCommentElement"
	extends="cappuccino.ide.intellij.plugin.comments.psi.impl.ObjJDocCommentElementImpl"
	elementTypeHolderClass="cappuccino.ide.intellij.plugin.comments.lexer.ObjJDocCommentTypes"
	elementTypePrefix="ObjJDocComment_"
	elementTypeClass="cappuccino.ide.intellij.plugin.comments.parser.ObjJDocCommentElementType"
	tokenTypeClass="cappuccino.ide.intellij.plugin.comments.lexer.ObjJDocCommentTokenType"
	psiClassPrefix="ObjJDocComment"
	psiImplClassSuffix="Impl"
	psiPackage="cappuccino.ide.intellij.plugin.comments.psi.api"
	psiImplPackage="cappuccino.ide.intellij.plugin.comments.psi.impl"
	elementTypeFactory("comment|tagLine|oldTagLine")="cappuccino.ide.intellij.plugin.comments.psi.ObjJDocCommentElementTypeFactory.factory"
	psiImplUtilClass="cappuccino.ide.intellij.plugin.comments.parser.ObjJDocCommentParserUtil"
	generateTokenAccessors=true
	name(".*")="comment"
	//Tokens
	tokens = [
		space = 							'regexp:\s+'
		OPEN_BRACE =						'{';
		CLOSE_BRACE =						'}';
		OPEN_PAREN =						'(';
		CLOSE_PAREN = 						')';
		OPEN_BRACKET =						'[';
		CLOSE_BRACKET = 					']';
		DASH = 								'-';
		EQUALS = 							'=';
		ELLIPSES_LITERAL = 					'...';
		AS_LITERAL = 						'regexp:[aA][sS]';
		START =								"regexp:/[*][*!]*";
		END =								'regexp:[*]+/';
		ASTERISK =							'*';
		TAG_NAME =							'regexp:@[a-zA-Z]+';
		TAG_VALUE_DELIMITER =				'regexp:[|,]';
		DOT =								'.';
		ID = 								'regexp:[_a-zA-Z$][a-zA-Z0-9_]*';
		TEXT_BODY =							'regexp:[-][^ \n$]+';
	]
}

root
	::= START comment? END
	;

comment
	::= (!<<eof>> commentElement)+
	{
		extends="cappuccino.ide.intellij.plugin.comments.psi.impl.ObjJDocCommentStubBasedElementImpl<?>"
		stubClass="cappuccino.ide.intellij.plugin.comments.psi.stubs.ObjJDocCommentCommentStub"
		implements = [
			"cappuccino.ide.intellij.plugin.comments.psi.api.ObjJDocCommentElement"
			"com.intellij.psi.PsiElement"
			"com.intellij.psi.PsiComment"
			"cappuccino.ide.intellij.plugin.comments.psi.api.ObjJDocCommentStubBasedElement<cappuccino.ide.intellij.plugin.comments.psi.stubs.ObjJDocCommentCommentStub>"
		]
		methods = [
			getTagLinesAsStructs
			getParametersAsStructs
			getReturnTagAsStruct
			getReturnType
			getParameterTags
			getTextLinesAsStrings
		]

	}
	;

private commentElement
	::= commentLine
	|	ASTERISK
	;

private commentLine
	::= tagLine endOfLine?
	|	textLine endOfLine?
	|	emptyTagLine endOfLine?
	|	oldTagLine
	//|	commentSoup
	| 	endOfLine
	;

tagLine
	::= tagNameElement typesList qualifiedName ('-'? textElement)?
	|	tagNameElement typesList optionalParameter ('-'? textElement)?
	|	tagNameElement qualifiedName ('-' textElement)?
	|	tagNameElement typesList textElement?
	|	tagNameElement qualifiedName AS_LITERAL qualifiedName
	{
		extends="cappuccino.ide.intellij.plugin.comments.psi.impl.ObjJDocCommentStubBasedElementImpl<?>"
		stubClass="cappuccino.ide.intellij.plugin.comments.psi.stubs.ObjJDocCommentTagLineStub"
		implements = [
			"cappuccino.ide.intellij.plugin.comments.psi.api.ObjJDocCommentElement"
			"cappuccino.ide.intellij.plugin.comments.psi.api.ObjJDocCommentStubBasedElement<cappuccino.ide.intellij.plugin.comments.psi.stubs.ObjJDocCommentTagLineStub>"
		]
		pin(".*") = 2;
		methods = [
			getTag
			getTypes
			getParameterNameString
			getCommentText
			tagName = "tagNameElement"
			borrowedThat = "/qualifiedName/[0]"
			borrowedAs = "/qualifiedName/[1]"
			getTagNameString
		]
	}
	;

oldTagLine
	::= tagNameElement oldTypesList parameterName? textElement?
	{
		pin=2
		methods = [
			getParameterNameElement
			getParameterNameString
			getTag
			getTypes
			getCommentText
			tagName = "tagNameElement"
			getTagNameString
			getParameterNameElement
		]

		extends="cappuccino.ide.intellij.plugin.comments.psi.impl.ObjJDocCommentStubBasedElementImpl<?>"
		stubClass="cappuccino.ide.intellij.plugin.comments.psi.stubs.ObjJDocCommentOldTagLineStub"
		implements = [
			"cappuccino.ide.intellij.plugin.comments.psi.api.ObjJDocCommentElement"
			"cappuccino.ide.intellij.plugin.comments.psi.api.ObjJDocCommentStubBasedElement<cappuccino.ide.intellij.plugin.comments.psi.stubs.ObjJDocCommentOldTagLineStub>"
		]
	}
	;

optionalParameter
	::= '[' qualifiedName defaultValue? ']'
	{
		pin=1
	}
	;

defaultValue
	::= '=' textElement
	{
		pin=1
		methods = [
			defaultValue
		]
	}
	;

emptyTagLine
	::= tagNameElement textLine?
	{
		pin = 2
		methods = [
			tagName = "tagNameElement"
		]
	}
	;

tagNameElement
	::= TAG_NAME
	;

private typesList
	::= '{' '(' (type TAG_VALUE_DELIMITER)* type ')' '}'
	|	'{' type '}'
	{
		pin(".*")=1
	}
	;

oldTypesList
	::= (qualifiedName TAG_VALUE_DELIMITER)* qualifiedName
	;

private ellipses
	::= ELLIPSES_LITERAL
	;

type
	::= ellipses? qualifiedName EQUALS?
	{
		pin=2
	}
	;

qualifiedName
	::= (qualifiedNameComponent '.')* qualifiedNameComponent
	{
		implements = [
			"cappuccino.ide.intellij.plugin.comments.psi.api.ObjJDocCommentElement"
			"cappuccino.ide.intellij.plugin.psi.interfaces.ObjJHasQualifiedName"
		]
		methods = [
			getQualifiedNameParts
			getQualifiedNamePath
		]
	}
	;

qualifiedNameComponent
	::= id ('[' ']')?
	{
		pin=1
		implements = [
			"cappuccino.ide.intellij.plugin.comments.psi.api.ObjJDocCommentElement"
			"cappuccino.ide.intellij.plugin.psi.interfaces.ObjJNamedElement"
			"cappuccino.ide.intellij.plugin.psi.interfaces.ObjJQualifiedReferenceComponent"
		]
		methods = [
			getName
			setName
			getIndexInQualifiedReference
			getReference
			isArrayComponent
		]
	}
	;

textLine
	::= !(TAG_NAME) (comment_element)+
	;

parameterName
	::= id
	{
		implements = [
			"cappuccino.ide.intellij.plugin.comments.psi.api.ObjJDocCommentElement"
			"cappuccino.ide.intellij.plugin.psi.interfaces.ObjJNamedElement"
			"cappuccino.ide.intellij.plugin.psi.interfaces.ObjJQualifiedReferenceComponent"
		]
		methods = [
			getName
			setName
			getIndexInQualifiedReference
			getReference
		]
	}
	;

private id
	::= ID
	|	AS_LITERAL
	;

textElement
	::= comment_element+
	;

private comment_element
	::= TAG_NAME
	|	TAG_VALUE_DELIMITER
	|	DOT
	|	DASH
	|	OPEN_BRACE
	|	CLOSE_BRACE
	|	ASTERISK
	|	OPEN_BRACKET
	|	CLOSE_BRACKET
	|	TEXT_BODY
	|	ID
	|	EQUALS
	|	CLOSE_PAREN
	|	OPEN_PAREN
	|	AS_LITERAL
	;

private endOfLine
	::= LINE_TERMINATOR | <<eof>>
	;

