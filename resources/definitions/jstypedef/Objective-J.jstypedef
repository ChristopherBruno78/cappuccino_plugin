readonly var E:number;
readonly var LN2:number;
readonly var LN10:number
readonly var LOG:number
readonly var LOG2E:number
readonly var PI:number
readonly var PI2:number
readonly var PI_2:number
readonly var SQRT1_2:number
readonly var SQRT2:number
readonly var CPLogDisable:BOOL
/**
 * Returns the absolute value of a number (the value without regard to whether it is positive or negative).
 * For example, the absolute value of -5 is the same as the absolute value of 5.
 * @param x A numeric expression for which the absolute value is needed.
 */
function ABS(x: number): number;
/**
 * Returns the arc cosine (or inverse cosine) of a number.
 * @param x A numeric expression.
 */
function ACOS(x: number): number;
/**
 * Returns the arcsine of a number.
 * @param x A numeric expression.
 */
function ASIN(x: number): number;
/**
 * Returns the arctangent of a number.
 * @param x A numeric expression for which the arctangent is needed.
 */
function ATAN(x: number): number;
/**
 * Returns the angle (in radians) from the X axis to a point.
 * @param y A numeric expression representing the cartesian y-coordinate.
 * @param x A numeric expression representing the cartesian x-coordinate.
 */
function ATAN2(y: number, x: number): number;
/**
 * Returns the smallest integer greater than or equal to its numeric argument.
 * @param x A numeric expression.
 */
function CEIL(x: number): number;
/**
 * Returns the cosine of a number.
 * @param x A numeric expression that contains an angle measured in radians.
 */
function COS(x: number): number;
/**
 * Returns e (the base of natural logarithms) raised to a power.
 * @param x A numeric expression representing the power of e.
 */
function EXP(x: number): number;
/**
 * Returns the greatest integer less than or equal to its numeric argument.
 * @param x A numeric expression.
 */
function FLOOR(x: number): number;
/**
 * Returns the natural logarithm (base e) of a number.
 * @param x A numeric expression.
 */
function LOG(x: number): number;
/**
 * Returns the larger of a set of supplied numeric expressions.
 * @param values Numeric expressions to be evaluated.
 */
function MAX(...values: number[]): number;
/**
 * Returns the smaller of a set of supplied numeric expressions.
 * @param values Numeric expressions to be evaluated.
 */
function MIN(...values: number[]): number;
/**
 * Returns the value of a base expression taken to a specified power.
 * @param x The base value of the expression.
 * @param y The exponent value of the expression.
 */
function POW(x: number, y: number): number;
/** Returns a pseudorandom number between 0 and 1. */
function RAND(): number;
/**
 * Returns a supplied numeric expression rounded to the nearest number.
 * @param x The value to be rounded to the nearest number.
 */
function ROUND(x: number): number;
/**
 * Returns the sine of a number.
 * @param x A numeric expression that contains an angle measured in radians.
 */
function SIN(x: number): number;
/**
 * Returns the square root of a number.
 * @param x A numeric expression.
 */
function SQRT(x: number): number;
/**
 * Returns the tangent of a number.
 * @param x A numeric expression that contains an angle measured in radians.
 */
function TAN(x: number): number;
@quiet
readonly var kCFErrorLocalizedDescriptionKey:string
@quiet
readonly var kCFErrorLocalizedFailureReasonKey:string
@quiet
readonly var kCFErrorLocalizedRecoverySuggestionKey:string
@quiet
readonly var kCFErrorDescriptionKey:string
@quiet
readonly var kCFErrorUnderlyingErrorKey:string
@quiet
readonly var kCFErrorURLKey:string
@quiet
readonly var kCFErrorFilePathKey:string
@quiet
readonly var kCFErrorDomainCappuccino:string
@quiet
readonly var kCFErrorDomainCocoa:string
@quiet
readonly var kCFURLErrorUnknown:number
@quiet
readonly var kCFURLErrorCancelled:number
@quiet
readonly var kCFURLErrorBadURL:number
@quiet
readonly var kCFURLErrorTimedOut:number
@quiet
readonly var kCFURLErrorUnsupportedURL:number
@quiet
readonly var kCFURLErrorCannotFindHost:number
@quiet
readonly var kCFURLErrorCannotConnectToHost:number
@quiet
readonly var kCFURLErrorNetworkConnectionLost:number
@quiet
readonly var kCFURLErrorDNSLookupFailed:number
@quiet
readonly var kCFURLErrorHTTPTooManyRedirects:number
@quiet
readonly var kCFURLErrorResourceUnavailable:number
@quiet
readonly var kCFURLErrorNotConnectedToInternet:number
@quiet
readonly var kCFURLErrorRedirectToNonExistentLocation:number
@quiet
readonly var kCFURLErrorBadServerResponse:number
@quiet
readonly var kCFURLErrorUserCancelledAuthentication:number
@quiet
readonly var kCFURLErrorUserAuthenticationRequired:number
@quiet
readonly var kCFURLErrorZeroByteResource:number
@quiet
readonly var kCFURLErrorCannotDecodeRawData:number
@quiet
readonly var kCFURLErrorCannotDecodeContentData:number
@quiet
readonly var kCFURLErrorCannotParseResponse:number
@quiet
readonly var kCFURLErrorRequestBodyStreamExhausted:number
@quiet
readonly var kCFURLErrorFileDoesNotExist:number
@quiet
readonly var kCFURLErrorFileIsDirectory:number
@quiet
readonly var kCFURLErrorNoPermissionsToReadFile:number
@quiet
readonly var kCFURLErrorDataLengthExceedsMaximum:number
 @quiet
readonly var kCFPropertyListOpenStepFormat:number
@quiet
readonly var kCFPropertyListXMLFormat_v1_0:number
@quiet
readonly var kCFPropertyListBinaryFormat_v1_0:number
@quiet
readonly var kCFPropertyList280NorthFormat_v1_0:number
@quiet
readonly var DEBUG:BOOL


/*-- @file: objective-j.js --*/
@quiet
interface objj_ivar {
    new(aName:string, aType:string)
    name:string
    type:string
}

@quiet
function objj_ivar(aName:string, aType:string):objj_ivar

@silent
interface allocator {

}

@quiet
interface objj_class {
    new(displayName:string)
    isa?:Any
    version:number
    super_class?:string
    name?:string
    info:number
    ivar_list:objj_ivar[]
    ivar_store:Any
    ivar_dtable:Any
    method_list:Any[]
    method_dtable:Any
    protocol_list:string[]
    allocator:Any
    _UID:number;

}
@quiet
interface objj_protocol {
    new(name:string)
    name:string
    instance_methods:Any[]
    class_methods:Any[]
}
@quiet
interface objj_object {
    isa?:Any
    _UID:number
}

function getName(aClass:objj_class):string

function class_isMetaClass(aClass:objj_class):BOOL

function class_getSuperclass(aClass:objj_class):string

function class_setSuperclass(aClass:objj_class, aSuperClass:string)

function class_addIvar(aClass:objj_class, aName:string, aType:string)

function class_addIvars(aClass:objj_class, ivars:objj_ivar[])



