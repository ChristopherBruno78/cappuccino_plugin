@file:@quiet
/*-- @file: Constants.js --*/
readonly var kCFErrorLocalizedDescriptionKey:string
readonly var kCFErrorLocalizedFailureReasonKey:string
readonly var kCFErrorLocalizedRecoverySuggestionKey:string
readonly var kCFErrorDescriptionKey:string
readonly var kCFErrorUnderlyingErrorKey:string
readonly var kCFErrorURLKey:string
readonly var kCFErrorFilePathKey:string
readonly var kCFErrorDomainCappuccino:string
readonly var kCFErrorDomainCocoa:string
readonly var kCFURLErrorUnknown:number
readonly var kCFURLErrorCancelled:number
readonly var kCFURLErrorBadURL:number
readonly var kCFURLErrorTimedOut:number
readonly var kCFURLErrorUnsupportedURL:number
readonly var kCFURLErrorCannotFindHost:number
readonly var kCFURLErrorCannotConnectToHost:number
readonly var kCFURLErrorNetworkConnectionLost:number
readonly var kCFURLErrorDNSLookupFailed:number
readonly var kCFURLErrorHTTPTooManyRedirects:number
readonly var kCFURLErrorResourceUnavailable:number
readonly var kCFURLErrorNotConnectedToInternet:number
readonly var kCFURLErrorRedirectToNonExistentLocation:number
readonly var kCFURLErrorBadServerResponse:number
readonly var kCFURLErrorUserCancelledAuthentication:number
readonly var kCFURLErrorUserAuthenticationRequired:number
readonly var kCFURLErrorZeroByteResource:number
readonly var kCFURLErrorCannotDecodeRawData:number
readonly var kCFURLErrorCannotDecodeContentData:number
readonly var kCFURLErrorCannotParseResponse:number
readonly var kCFURLErrorRequestBodyStreamExhausted:number
readonly var kCFURLErrorFileDoesNotExist:number
readonly var kCFURLErrorFileIsDirectory:number
readonly var kCFURLErrorNoPermissionsToReadFile:number
readonly var kCFURLErrorDataLengthExceedsMaximum:number
 readonly var kCFPropertyListOpenStepFormat:number
readonly var kCFPropertyListXMLFormat_v1_0:number
readonly var kCFPropertyListBinaryFormat_v1_0:number
readonly var kCFPropertyList280NorthFormat_v1_0:number
readonly var DEBUG:BOOL


/*-- @file: /objective-j/lib/objective-j.js --*/

function run(...args:Any)

function sprintf(format:string, ...args:Any)

function justify(sign:string, prefix:string, string:string, suffix:string, width:number, leftJustify:BOOL, padZeros:BOOL)

interface EventDispatcher {
    new(anOwner:Object)
    addEventListener(anEventName:string, anEventListener:EventListener)
    removeEventListener(anEventName:string, anEventListener:EventListener):EventListener
    dispatchEvent(anEvent:Event)
}

function Asynchronous(aFunction:Function)

alias CFHTTPRequestStatusCode:number

interface CFHTTPRequest {
    new()
    self:CFHTTPRequest
    status():CFHTTPRequestStatusCode
    statusText():string
    readyState:CFHTTPRequestStatusCode
    success():BOOL
    responseXML():XMLDocument
    responsePropertyList:CFPropertyList
    responseText:string
    setRequestHeader(aHeader:string, aValue:string)
    getResponseHeader(aHeader:string)
    overrideMimeType(aMimeType:string)
    setTimeout(aTimeout:number)
    getTimeout():number
    getAllResponseHeaders():string
    open(aMethod:string, aURL:string, isAsynchronous:BOOL, aUser?:string, aPassword?:string)
    send(aBody?:string)
    abort():undefined
    addEventListener(anEventName:string, anEventListener:EventListener)
    removeEventListener(anEventName:string, anEventListener:EventListener)
    isTimeoutRequest():BOOL
    setWithCredentials(willSendWithCredentials:BOOL)
    withCredentials():BOOL
    static readonly UninitializedState:CFHTTPRequestStatusCode;
    static readonly LoadingState:CFHTTPRequestStatusCode;
    static readonly LoadedState:CFHTTPRequestStatusCode;
    static readonly InteractiveState:CFHTTPRequestStatusCode;
    static readonly CompleteState:CFHTTPRequestStatusCode;
    static AuthenticationDelegate?:Any
}

function dispatchTimeoutHTTPRequestEvents(aRequest:CFHTTPRequest)
function determineAndDispatchHTTPRequestEvents(aRequest:CFHTTPRequest)

function FileRequest(aURL:string, onsuccess:(anEvent:Event)=>void, onfailure:(anEvent:Event)=>void, onprogress:(delta:number)=>void)

function objj_generateObjectUID():number

alias CFPropertyListFormat:number

interface CFPropertyList {
    static readonly DTDRE:regex
    static readonly XMLRE:regex
    static readonly FormatXMLDTD:string
    static readonly Format280NorthMagicNumber:string
    static readonly FormatOpenStep:CFPropertyListFormat
    static readonly FormatBinary_v1_0:CFPropertyListFormat
    static readonly FormatXML_v1_0:CFPropertyListFormat
    static readonly Format280North_v1_0:CFPropertyListFormat
    static sniffedFormatOfString(aString:string):CFPropertyListFormat|null
    static dataFromPropertyList(aPropertyList:CFPropertyList, aFormat:CFPropertyListFormat):CFMutableData
    static stringFromPropertyList(aPropertyList:CFPropertyList, aFormat:CFPropertyListFormat):string
    static readPropertyListFromFile(aFilePath:string):CFPropertyList
    static writePropertyListToFile(aPropertyList:CFPropertyList, aFilePath:string, aFormat:CFPropertyListFormat):BOOL
    static modifyPlist(aFilePath:string, aCallback:(pList:CFPropertyList)=>void, aFormat:CFPropertyListFormat)
    static serializePropertyList(aPropertyList:CFPropertyList, serializers:Any[])
    static propertyListFromXML(aStringOrXMLNode:string|XMLDocument):CFPropertyList
}

interface CFPropertyListSerializer {
    start():string
    finish():string
    string(aString:string):string
    boolean(aBoolean:BOOL):string
    integer(anInteger:Int):string
    real(aReal:number):string
    array(anArray:Any[], serializers:CFPropertyListSerializer)
    dictionary(aDictionary:CFDictionary, serializers:CFPropertyListSerializer)
}

function propertyListFromData(aData:CFMutableData, aFormat:CFPropertyListFormat);
function propertyListFromString(aString:string, aFormat:CFPropertyListFormat)
function propertyListFrom280NorthString(aString:string):CFPropertyList
function decodeHTMLComponent(aString:string):string
function encodeHTMLComponent(aString:string):string

function parseXML(aString:string):XMLDocument
function CFPropertyListCreate():CFPropertyList
function CFPropertyListCreateFromXMLData(aData:CFData):CFPropertyList
function CFPropertyListCreateXMLData(aPropertyList:CFPropertyList):CFData
function CFPropertyListCreateFrom280NorthData(data:CFData):CFPropertyList
function CFPropertyListCreate280NorthData(aPropertyList:CFPropertyList):CFData
function CPPropertyListCreateFromData(data:CFData, aFormat:CFPropertyListFormat)
function CPPropertyListCreateData(aPropertyList:CFPropertyList, aFormat:CFPropertyListFormat):CFData

readonly var kCFPropertyListOpenStepFormat:CFPropertyListFormat
readonly var kCFPropertyListXMLFormat_v1_0:CFPropertyListFormat
readonly var kCFPropertyListBinaryFormat_v1_0:CFPropertyListFormat
readonly var kCFPropertyList280NorthFormat_v1_0:CFPropertyListFormat



@quiet var asyncLoader:BOOL
var objj_frameworks:Any[]

var objj_debug_frameworks:Any[]

interface objj_ivar {
    new(aName:string, aType:string)
    name:string
    type:string
}

function objj_ivar(aName:string, aType:string):objj_ivar

@silent
function Allocator(aFunction:Function)

interface objj_class {
    new(displayName:string)
    isa?:Any
    version:number
    super_class?:string
    name?:string
    info:number
    ivar_list:objj_ivar[]
    ivar_store:Any
    ivar_dtable:Any
    method_list:Any[]
    method_dtable:Any
    protocol_list:string[]
    allocator:Any
    _UID:number;

}
interface objj_protocol {
    new(name:string)
    name:string
    instance_methods:Any[]
    class_methods:Any[]
}
interface objj_object {
    isa?:Any
    _UID:number
}

function getName(aClass:objj_class):string

function class_isMetaClass(aClass:objj_class):BOOL

function class_getSuperclass(aClass:objj_class):string

function class_setSuperclass(aClass:objj_class, aSuperClass:string)

function class_addIvar(aClass:objj_class, aName:string, aType:string)

function class_addIvars(aClass:objj_class, ivars:objj_ivar[])

