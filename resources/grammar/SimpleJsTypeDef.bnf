{
	parserClass="cappuccino.ide.intellij.plugin.jstypedef.parser.ObjJJsTypeDefParser"
	parserUtilClass="cappuccino.ide.intellij.plugin.jstypedef.parser.JsTypeDefParserUtil"
	extends="cappuccino.ide.intellij.plugin.jstypedef.psi.impl.JsTypeDefElementImpl"
	elementTypeHolderClass="cappuccino.ide.intellij.plugin.jstypedef.psi.types.JsTypeDefTypes"
	elementTypePrefix="JS_"
	elementTypeClass="cappuccino.ide.intellij.plugin.jstypedef.psi.types.JsTypeDefType"
	tokenTypeClass="cappuccino.ide.intellij.plugin.jstypedef.psi.types.JsTypeDefTokenType"
	psiClassPrefix="JsTypeDef"
	psiImplClassSuffix="Impl"
	psiPackage="cappuccino.ide.intellij.plugin.jstypedef.psi"
	psiImplPackage="cappuccino.ide.intellij.plugin.jstypedef.psi.impl"
	generateTokenAccessors=true
	psiImplUtilClass="cappuccino.ide.intellij.plugin.jstypedef.psi.utils.JsTypeDefPsiImplUtil"
	consumeTokenMethod("interfaceBody")="consumeTokenFast"
	elementTypeFactory("function|variableDeclaration|property|module|moduleName|typeMap|keyList")="cappuccino.ide.intellij.plugin.jstypedef.psi.types.JsTypeDefTypeFactory.factory"

	name("eos") = "semi-colon"
	name("stringLiteral") = "String"
	name("integer") = "Int"
	//Tokens
	tokens = [
		//Line Terminator
		LINE_TERMINATOR =                 	'___LINE_TERM__'//'regexp:[\r\n\u2028\u2029]'
		WS = 								'regexp:\s+'

		FUNCTION_ARROW						'=>'
		EG =								'='
		COLON =								':'
		SEMI_COLON =						';'
		PIPE =								'|'
		OPEN_ARROW =						'<'
		CLOSE_ARROW =						'>'
		NULLABLE =							'?'
		COMMA =								','
		OPEN_BRACE =						'{'
		CLOSE_BRACE =						'}'
		OPEN_BRACKET = 						'['
		CLOSE_BRACKET =						']'
		OPEN_PAREN =						'('
		CLOSE_PAREN =						')'
		DOT =								'.'
		SINGLE_QUOTE =						"'"
		DOUBLE_QUOTE =						'"'

		//KeyWords
		READONLY =							'readonly'
		VAR =								'var'
		ARRAY =								'Array'
		INTERFACE =							'interface'
		EXTENDS =							'extends'
		CONST =								'constructor'
		FUNCTION =							'function'
		VOID = 								'void'
		NULL_TYPE =							'null'
		MODULE =							'module'
		MAP =								'Map'
		TYPE_MAP_KEYWORD = 					'typemap'
		KEYOF = 							'keyof'
		KEYS_KEYWORD =						'keys'
		ALIAS = 							'alias'

		BLOCK_COMMENT_START = 				'/*'
		BLOCK_COMMENT_BODY =				'____BLOCK_COMMENT_BODY__'
		BLOCK_COMMENT_END =					'*/'
		BLOCK_COMMENT =             		'regexp:/\*([^*]|\*[^/])*\*/'
		SINGLE_LINE_COMMENT =       		'regexp://[^\r\n\u2028\u2029]*'
		LINE_TERMINATOR =					'LINETERMINATOR'
		SINGLE_QUOTE_STRING	=				"regexp:'([^\\'\r\n]|\\[\\'brfntvuU0])*'"
		DOUBLE_QUOTE_STRING	= 				'regexp:"([^\\"\r\n]|\\[\\"brfntvuU0])*"'
		INTEGER_LITERAL =					'regexp:[0-9]+'
		ESCAPED_ID =						'regexp:`\s*[_a-zA-Z][_a-zA-Z0-9]*\s*`'
		ID = 								'regexp:[_a-zA-Z][_a-zA-Z0-9]*'
	]
}

defFile ::= fileRootElement*

private fileRootElement
	::= !<<eof>> definition
	;

private definition
	::=	module
	|	interfaceElement
	|	variableDeclaration
	|	functionDeclaration
	|	typeMap
	|	keyList eos?
	;

module
	::= MODULE namespacedModuleName '{' moduleElements? '}'
	{
		pin = 2
		extends="cappuccino.ide.intellij.plugin.jstypedef.psi.impl.JsTypeDefStubBasedElementImpl<?>"
		implements = [
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefHasNamespace"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefStubBasedElement<cappuccino.ide.intellij.plugin.jstypedef.stubs.interfaces.JsTypeDefModuleStub>"
        ]
        stubClass="cappuccino.ide.intellij.plugin.jstypedef.stubs.interfaces.JsTypeDefModuleStub"
		methods = [
		    getEnclosingNamespaceComponents
	        getNamespacedName
			getNamespaceComponents
			getAllSubModules
			getEnclosingNamespace
			getCollapsedNamespaceComponents
		]
	}
	;

private moduleElements
	::= fileRootElement+
	{
		recoverWhile = moduleElements_recover
	}
	;

private moduleElements_recover
	::= !('}')
	;

variableDeclaration
	::= READONLY? VAR property eos?
	{
		pin = 3
		extends = property
		implements = [
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefElement"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefNoVoid"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefHasNamespace"
		]
		methods = [
			getEnclosingNamespace
			getEnclosingNamespaceComponents
	        getNamespacedName
	        getNamespaceComponents
	        getNamespaceComponent
		]
	}
	;

functionDeclaration
	::= FUNCTION function eos?
	{
		pin = 2
		extends = function
		implements = [
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefHasNamespace"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefElement"
		]
		methods = [
			getEnclosingNamespace
			getEnclosingNamespaceComponents
	        getNamespacedName
	        getNamespaceComponents
	        getNamespaceComponent
		]
	}
	;

keyList
	::= KEYS_KEYWORD keyName '=' stringLiteral ( '|' stringLiteral)*
	{
		pin = 1
		extends = "cappuccino.ide.intellij.plugin.jstypedef.psi.impl.JsTypeDefStubBasedElementImpl<?>"
		implements = [
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefNotInModule"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefStubBasedElement<cappuccino.ide.intellij.plugin.jstypedef.stubs.interfaces.JsTypeDefKeysListStub>"
	  	]
	  	stubClass="cappuccino.ide.intellij.plugin.jstypedef.stubs.interfaces.JsTypeDefKeysListStub"
	};

anonymousFunction
	::= '(' propertiesList? ')' '=>' functionReturnType
	{
		pin = 1

	}
	;

interfaceElement
	::= 'interface' typeName genericParameters? extendsStatement? (interfaceBody | ';')
	{
		pin = 1
		extends="cappuccino.ide.intellij.plugin.jstypedef.psi.impl.JsTypeDefStubBasedElementImpl<?>"
		implements = [
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefStubBasedElement<cappuccino.ide.intellij.plugin.jstypedef.stubs.interfaces.JsTypeDefInterfaceStub>"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefHasNamespace"
		]
        stubClass="cappuccino.ide.intellij.plugin.jstypedef.stubs.interfaces.JsTypeDefInterfaceStub"
		methods = [
			getConstructors
			getInterfaceName
			getEnclosingNamespace
			getEnclosingNamespaceComponents
	        getNamespaceComponents
	        getNamespaceComponent
	        getNamespacedName
		]
	}
	;

private genericParameters
	::= '<' genericParameterType* '>'
	;

genericParameterType
	::= (genericsKey ':')? types
	{
		recoverWhile = genericParameterType_recover
	}
	;

private genericParameterType_recover
	::= !('>')
	;

interfaceBody
	::= '{' interfaceProperties? '}'
	{
		pin = 1
	}
	;

private interfaceProperties
	::= interfaceProperty+
	{
		recoverWhile = interfaceProperties_recover
	}
	;

private interfaceProperties_recover
	::= !('}')
	;

private interfaceProperty
	::= interfaceConstructor eos?
	|	function eos?
	|	property eos?
	;


extendsStatement
	::= 'extends' typeList
	{
		pin = 1
		implements = [
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefNoNull"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefNoVoid"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefElement"
		]
	}
	;

private typeList
	::= type ("," type)*
	{
		pin = 2
	}
	;



private types
	::= type ("|" type)*
	{
		pin = 2
	}
	;

type
	::= keyOfType
	|	keyMapReturnType
	|	arrayType
	|	mapType
	|	genericType
	| 	typeName
	|	interfaceBody
	|	'null'
	|  	anonymousFunction
	|	'void'
	{
		implements = [
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefNoVoid"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefHasVoid"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefHasNull"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefElement"
		]
	}
	;

keyOfType
	::= genericsKey KEYOF typeMapName
	;

mapType
	::= MAP '<' types ',' types '>'
	;

typeMap
	::= TYPE_MAP_KEYWORD typeMapName '{' typeMapBody? '}'
	{
		pin = 1
		extends = "cappuccino.ide.intellij.plugin.jstypedef.psi.impl.JsTypeDefStubBasedElementImpl<?>"
		implements = [
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefNotInModule"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefStubBasedElement<cappuccino.ide.intellij.plugin.jstypedef.stubs.interfaces.JsTypeDefTypeMapStub>"
	  	]
	  	stubClass="cappuccino.ide.intellij.plugin.jstypedef.stubs.interfaces.JsTypeDefTypeMapStub"
	  	methods = [
	  		getMapName
	  		getKeys
	  		getTypesForKey
	  		getKeyValuePairs
	  	]
	}
	;

private typeMapBody
	::= typeMapKeyValuePair+
	{
		recoverWhile = typeMapBody_recover
	}
	;

private typeMapBody_recover
	::= !("}")
	;

typeMapKeyValuePair
	::= stringLiteral ':' types eos?
	{
		methods = [
			getKey
			getTypesList
			isNullable
		]
	}
	;

genericType
	::= typeName genericTypeTypes
	{
		pin = 2
	}
	;

genericTypeTypes
	::= '<' types '>'
	{
		pin = 1
		implements = [
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefNoNull"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefNoVoid"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefElement"
		]
	}
	;

arrayType
	::= ARRAY arrayDimensions? genericTypeTypes
	{
		pin = 1
	}
	;

arrayDimensions
	::= '[' integer ']'
	;

interfaceConstructor
	::= CONST '(' propertiesList? ')'
	;

function
	::= functionName functionGenerics? '(' propertiesList? ')' (':' functionReturnType)?
	{
		pin = 3
		extends="cappuccino.ide.intellij.plugin.jstypedef.psi.impl.JsTypeDefStubBasedElementImpl<?>"
	    methods = [
	        isNullableReturnType
	        getNamespacedName
			getEnclosingNamespace
			getEnclosingNamespaceComponents
	        getNamespaceComponents
	        getNamespaceComponent
	    ]
		implements = [
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefHasNamespace"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefStubBasedElement<cappuccino.ide.intellij.plugin.jstypedef.stubs.interfaces.JsTypeDefFunctionStub>"
	  	]
	  	stubClass="cappuccino.ide.intellij.plugin.jstypedef.stubs.interfaces.JsTypeDefFunctionStub"
	  	recoverWhile = function_recover
	}
	;

private functionGenerics
	::= '<' functionGenericEntry+ '>'
	{
		pin = 1
	}
	;

private functionGenericEntry
	::= functionGeneric
	;


functionGeneric
	::= genericsKey (':' types)?
	;


private function_recover
	::= !(eos)
	;

functionName
	::= CONST
	|	ESCAPED_ID
	|	ID
	{
		implements = [
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefNamedElement"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefElement"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefHasNamespace"
		]
		methods = [
			getName
			setName
	        getNamespacedName
			getEnclosingNamespace
			getEnclosingNamespaceComponents
	        getNamespaceComponents
	        getNamespaceComponent
		]

	}
	;

propertiesList
	::= property (',' property)*
	{
		recoverWhile = propertiesList_recover
		implements = [
		    "cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefAllowAnonymousFunctions"
		    "cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefElement"
		]
	}
	;

private propertiesList_recover
	::= !(")")
	;

property
	::= READONLY? propertyName ':' types
	{
		extends="cappuccino.ide.intellij.plugin.jstypedef.psi.impl.JsTypeDefStubBasedElementImpl<?>"
	    methods = [
	        isNullable
	        getPropertyTypes
			getEnclosingNamespace
			getEnclosingNamespaceComponents
	        getNamespacedName
	        getNamespaceComponents
	        getNamespaceComponent
	    ]
		implements = [
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefHasNamespace"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefNoKeyMapReturn"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefStubBasedElement<cappuccino.ide.intellij.plugin.jstypedef.stubs.interfaces.JsTypeDefPropertyStub>"
	  	]
	  	stubClass="cappuccino.ide.intellij.plugin.jstypedef.stubs.interfaces.JsTypeDefPropertyStub"
	}
	;

propertyName
	::= ESCAPED_ID
	|	ID
	|	keyList
	|	keyof
	{
		implements = [
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefNamedElement"
		]
		methods = [
			getName
			setName
		]
	}
	;

functionReturnType
	::= types
	|	VOID
	{
		implements = [
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefNoKeyOfTypes"
		]
	    methods = [
	        isNullable
	    ]
	}
	;

keyMapReturnType
	::= typeMapName '[' genericsKey ']'
	{
		pin = 2
	}
	;

typeName
	::= ID
	| 	VOID
	|	ARRAY
	|	MAP
	{
		implements = [
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefNoVoid"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefNamedElement"
		]
		methods = [
			getName
			setName
		]
	}
	;

namespacedModuleName
	::= namespace moduleName
	;

namespace
    ::= (moduleName '.')*
    ;

moduleName
	::= ID
	{
		extends = "cappuccino.ide.intellij.plugin.jstypedef.psi.impl.JsTypeDefStubBasedElementImpl<?>"
		implements = [
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefNamedElement"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefHasNamespace"
			"cappuccino.ide.intellij.plugin.jstypedef.psi.interfaces.JsTypeDefStubBasedElement<cappuccino.ide.intellij.plugin.jstypedef.stubs.interfaces.JsTypeDefModuleNameStub>"
		]
		stubClass = "cappuccino.ide.intellij.plugin.jstypedef.stubs.interfaces.JsTypeDefModuleNameStub"
		methods = [
			getName
			setName
			getNamespaceComponent
			getNamespaceComponents
			getNamespacedName
			getEnclosingNamespaceComponents
			getIndexInDirectNamespace
			getIndexInNamespace
		]
	}
	;

typeMapName
	::= ID
	;

genericsKey
	::= ID
	;

stringLiteral
	::= SINGLE_QUOTE_STRING
	|	DOUBLE_QUOTE_STRING
	{
		methods = [
			getContent
		]
	}
	;

integer
	::= INTEGER_LITERAL
	;

keyName ::= ID ;

private eos
	::= <<lineTerminatorAhead>>
	|	';'
	|	LINE_TERMINATOR
	;