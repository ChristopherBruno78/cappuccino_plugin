{
	parserClass="org.cappuccino_project.ide.intellij.plugin.extensions.plist.parser.ObjJPlistParser"
	//parserUtilClass="org.cappuccino_project.ide.intellij.plugin.extensions.plist.parser.ObjJPlistParserUtil"
	//implements="org.cappuccino_project.ide.intellij.plugin.extensions.plist.psi.interfaces.ObjJPlistCompositeElement"
	//extends="org.cappuccino_project.ide.intellij.plugin.extensions.plist.psi.mixin.ObjJPlistCompositeElementImpl"
	elementTypeHolderClass="org.cappuccino_project.ide.intellij.plugin.extensions.plist.psi.types.ObjJPlistTypes"
	elementTypePrefix="ObjJPlist_"
	//elementTypeClass="org.cappuccino_project.ide.intellij.plugin.extensions.plist.psi.types.ObjJCompositeElementType"
	tokenTypeClass="org.cappuccino_project.ide.intellij.plugin.extensions.plist.psi.types.ObjJPlistTokenType"
	psiClassPrefix="ObjJPlist"
	psiImplClassSuffix="Impl"
	psiPackage="org.cappuccino_project.ide.intellij.plugin.extensions.plist.psi"
	psiImplPackage="org.cappuccino_project.ide.intellij.plugin.extensions.plist.psi.impl"
	generateTokenAccessors=true

	//Tokens
	tokens = [
		//Line Terminator
		LINE_TERMINATOR =                 	'regexp:[\r\n\u2028\u2029]'
		space = 							'regexp:\s+'
		//Symbols
		GT =			 					'>'
		LT =                 			   	'<'
		LT_SLASH =							'</'
		SLASH_GT =							'/>'
		OPENING_HEADER_BRACKET =			'<?'
		CLOSING_HEADER_BRACKET =			'?>'
		EQUALS =							'='
		STRING_OPEN =						'<string>'
		STRING_CLOSE =						'</string>'
		REAL_OPEN =							'<real>'
		REAL_CLOSE =						'</real>'
		INTEGER_OPEN = 						'<integer>'
		INTEGER_CLOSE =						'</integer>'
		TRUE = 								'<true/>'
		FALSE =								'<false/>'
		KEY_OPEN =							'<key>'
		KEY_CLOSE =							'</key>'
		DICT_OPEN =							'<dict>'
		DICT_CLOSE =						'</dict>'
		ARRAY_OPEN =						'<array>'
		ARRAY_CLOSE =						'</array>'
		DATA_OPEN =							'<data>'
		DATA_CLOSE =						'</data>'
		DATE_OPEN =							'<date>'
		DATE_CLOSE =						'</date>'
		DOCTYPE_OPEN =						'<!DOCTYPE'
		PLIST_OPEN =						'<plist'
		PLIST_CLOSE	=						'</plist>'

		//Static values
		XML =								'xml'
		VERSION =							'version'

/*
		SINGLE_QUOTE_STRING_LITERAL = 		"regexp:'([^'\\\r\n]|\\['\\bfnrtv])*'"
		DOUBLE_QUOTE_STRING_LITERAL = 		'regexp:(@"|")([^"\\\r\n]|\\["\\bfnrtv])*"'

		//Literals
		DECIMAL_LITERAL = 					'regexp:[0-9]*\.[0-9]+([eE] [+-]? [0-9]+)?'
		INTEGER_LITERAL = 					'regexp:[0-9]+'
		DATA_LITERAL = 						'regexp=.+?(?=</data>)'
		STRING_TAG_LITERAL = 				'regexp=.+(!</string>)'
		ID = 								'regexp:[_a-zA-Z][_a-zA-Z0-9]*'
		XML_TAG_PROPERTY_KEY =				'regexp:[_a-zA-Z-][_a-zA-Z0-9\-]*'
		COMMENT = 							'regexp:<\!--.*-->'
		*/
	]
	name("stringValue|INTEGER|DECIMAL_LITERAL|DATA_LITERAL|STRING_TAG_LITERAL")="value"
	name("xmlTagProperty")="tag property"
}

plistFile
	::= COMMENT* xmlHeader? COMMENT* docType? COMMENT* plist? COMMENT* <<eof>>?
	;

plist
 	::= plistOpenTag COMMENT*  dict? COMMENT* '</plist>'
 	{
 		pin=1
 	}
 	;

private propertyList
	::= property+
	{
		recoverWhile=propertyList_recover
	}
	;

private propertyList_recover
	::= !('</plist>'|<<eof>>)
	;

docType
	::= '<!DOCTYPE' docTypeParamList? '>'
	{
		pin=1
	}
	;

docTypeParamList
	::= (XML_TAG_PROPERTY_KEY|stringLiteral)+
	{
		recoverWhile=docTypeParamList_recover
	}
	;

private docTypeParamList_recover
	::= !('>'|'<'|'<?')
	;


plistOpenTag
	::= '<plist' xmlTagPropertiesList? '>'
	;

xmlHeader
	::= '<?''xml' xmlTagPropertiesList? '?>'
	{
		pin=1
	}
	;

private xmlTagPropertiesList
	::= xmlTagProperty+
	{
		recoverWhile=xmlTagPropertiesList_recover
	}
	;

private xmlTagPropertiesList_recover
	::= !('?>'|'>'|'<'|<<eof>>)
	;

xmlTagProperty
	::= XML_TAG_PROPERTY_KEY '=' stringLiteral
	|	'version' '=' stringLiteral
	{
		pin(".*")=2
	}
	;

dict
	::= '<dict>'  propertyList? '</dict>'
	{
		pin=1
	}
	;

keyProperty
	::= '<key>' keyName '</key>'
	{
		pin=1
	}
	;

keyName
	::= ID ('.' ID)?
	{
		recoverWhile=recover_keyName
	}
	;

private recover_keyName
	::= !(
		'<key>'|'</key>'
	|	'<data>'|'</data>'
	|	'<dict>'|'</dict>'
	|	'<array>'|'</array>'
	|	'<real>'|'</real>'
	|	'<integer>'|'</integer>'
	|	'<string>'|'</string>'
	|	'<true/>' | '<false/>'
	|	'</plist>'
	);

/*
private recover_All
	::= !(
		'<key>'	|'</key>'
	|	'<data>'|'</data>'
	|	'<dict>'|'</dict>'
	|	'<array>'|'</array>'
	|	'<real>'|'</real>'
	|	'<integer>'|'</integer>'
	|	'<string>'|'</string>'
	|	'<true/>' | '<false/>'
	|	'</plist>'
	|	<<eof>>
	);
*/

property
	::= COMMENT* keyProperty COMMENT*  value* COMMENT*
	;

private value
	::= boolean
	|	dict
	|	array
	|	realNumber
	|	integer
	| 	dataValue
	|	string
	;


string
	::= '<string>' COMMENT* stringValue COMMENT* '</string>'
	{
		pin=1
		recoverWhile=recover_string
	}
	;


private recover_string
	::= !(
		'<key>'	|'</key>'
	|	'<data>'|'</data>'
	|	'<dict>'|'</dict>'
	|	'<array>'|'</array>'
	|	'<real>'|'</real>'
	|	'<integer>'|'</integer>'
	|	'<string>'
	|	'<true/>' | '<false/>'
	|	'</plist>'
	|	<<eof>>
	);

realNumber
	::= '<real>'COMMENT*  DECIMAL_LITERAL COMMENT*  '</real>'
	{
		pin=1
		recoverWhile=recover_realNumber
	}
	;


private recover_realNumber
	::= !(
		'<key>'	|'</key>'
	|	'<data>'|'</data>'
	|	'<dict>'|'</dict>'
	|	'<array>'|'</array>'
	|	'<real>'
	|	'<integer>'|'</integer>'
	|	'<string>'|'</string>'
	|	'<true/>' | '<false/>'
	|	'</plist>'
	|	<<eof>>
	);

integer
	::= '<integer>' COMMENT*  INTEGER_LITERAL COMMENT*  '</integer>'
	{
		pin=1
		recoverWhile=recover_integer
	}
	;

private recover_integer
	::= !(
		'<key>'	|'</key>'
	|	'<data>'|'</data>'
	|	'<dict>'|'</dict>'
	|	'<array>'|'</array>'
	|	'<real>'|'</real>'
	|	'<integer>'
	|	'<string>'|'</string>'
	|	'<true/>' | '<false/>'
	|	'</plist>'
	|	<<eof>>
	);

boolean
	::= '<true/>'|'<false/>'
	;

array
	::= '<array>' COMMENT* arrayValueList? COMMENT*  '</array>'
	{
		pin=1
		recoverWhile=recover_array
	}
	;


private recover_array
	::= !(
		'<key>'	|'</key>'
	|	'<data>'|'</data>'
	|	'<dict>'|'</dict>'
	|	'<array>'
	|	'<real>'|'</real>'
	|	'<integer>'|'</integer>'
	|	'<string>'|'</string>'
	|	'<true/>' | '<false/>'
	|	'</plist>'
	|	<<eof>>
	);

private arrayValueList
	::= value+
	{
		recoverWhile=arrayValueList_recover
	}
	;

private arrayValueList_recover
	::= !('</array>'|<<eof>>)
	;

dataValue
	::= '<data>' COMMENT*  DATA_LITERAL COMMENT*  '</data>'
	{
		pin=1;
		recoverWhile=recover_dataValue
	}
	;

private recover_dataValue
	::= !(
		'<key>'	|'</key>'
	|	'<data>'
	|	'<dict>'|'</dict>'
	|	'<array>'|'</array>'
	|	'<real>'|'</real>'
	|	'<integer>'|'</integer>'
	|	'<string>'|'</string>'
	|	'<true/>' | '<false/>'
	|	'</plist>'
	|	<<eof>>
	);

private property_recover
	::= !('<array>'|'<data>'|'<string>'|'<integer>'|'<real>'|'<key>'|'</plist>')
	;

stringLiteral
	::= DOUBLE_QUOTE_STRING_LITERAL
	|	SINGLE_QUOTE_STRING_LITERAL
	;

stringValue
	::= STRING_TAG_LITERAL
	;
